/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  listNotifications?: Array<GQLNotification | null>
  fetchBirthRegistration?: GQLBirthRegistration
  searchBirthRegistrations?: Array<GQLBirthRegistration | null>
  searchDeathRegistrations?: Array<GQLDeathRegistration | null>
  queryRegistrationByIdentifier?: GQLBirthRegistration
  queryPersonByIdentifier?: GQLPerson
  listBirthRegistrations?: GQLBirthRegResultSet
  fetchDeathRegistration?: GQLDeathRegistration
  fetchEventRegistration?: GQLEventRegistration
  fetchRegistration?: GQLEventRegistration
  queryPersonByNidIdentifier?: GQLPerson
  fetchRegistrationCountByStatus?: GQLRegistrationCountResult
  locationsByParent?: Array<GQLLocation | null>
  locationById?: GQLLocation
  hasChildLocation?: GQLLocation
  getUser?: GQLUser
  searchUsers?: GQLSearchUserResult
  searchFieldAgents?: GQLSearchFieldAgentResult
  verifyPasswordById?: GQLVerifyPasswordResult
  fetchRegistrationMetrics?: GQLRegistrationMetrics
  getEventEstimationMetrics?: GQLEventEstimationMetrics
  getApplicationsStartedMetrics?: GQLApplicationsStartedMetrics
  fetchMonthWiseEventMetrics?: GQLMonthWiseEstimationMetrics
  fetchLocationWiseEventMetrics?: GQLLocationWiseEstimationMetrics
  fetchTimeLoggedMetricsByPractitioner?: GQLTimeLoggedMetricsResultSet
  searchEvents?: GQLEventSearchResultSet
  getEventsWithProgress?: GQLEventProgressResultSet
  getRoles?: Array<GQLRole | null>
}

export interface GQLMutation {
  createNotification: GQLNotification
  voidNotification?: GQLNotification
  createBirthRegistration: GQLCreatedIds
  updateBirthRegistration: string
  markBirthAsVerified?: GQLBirthRegistration
  markBirthAsValidated?: string
  markBirthAsRegistered: GQLBirthRegistration
  markBirthAsCertified: string
  markEventAsVoided: string
  notADuplicate: string
  createDeathRegistration: GQLCreatedIds
  updateDeathRegistration: string
  markDeathAsVerified?: GQLDeathRegistration
  markDeathAsValidated?: string
  markDeathAsRegistered: GQLDeathRegistration
  markDeathAsCertified: string
  createOrUpdateUser: GQLUser
  activateUser?: string
  changePassword?: string
  auditUser?: string
  resendSMSInvite?: string
}

export interface GQLDummy {
  dummy: string
}

export interface GQLNotification {
  id: string
  child?: GQLPerson
  mother?: GQLPerson
  father?: GQLPerson
  informant?: GQLPerson
  location?: GQLLocation
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export type GQLDate = any

export interface GQLBirthRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  child?: GQLPerson
  mother?: GQLPerson
  father?: GQLPerson
  informant?: GQLRelatedPerson
  eventLocation?: GQLLocation
  vaccination?: GQLVaccination
  birthType?: GQLBirthType
  weightAtBirth?: number
  heightAtBirth?: number
  attendantAtBirth?: GQLAttendantType
  otherAttendantAtBirth?: string
  birthRegistrationType?: GQLBirthRegType
  presentAtBirthRegistration?: GQLBirthRegPresence
  otherPresentAtBirthRegistration?: string
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  primaryCaregiver?: GQLPrimaryCaregiver
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLDeathRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  deceased?: GQLPerson
  informant?: GQLRelatedPerson
  mother?: GQLPerson
  father?: GQLPerson
  spouse?: GQLPerson
  eventLocation?: GQLLocation
  mannerOfDeath?: GQLMannerOfDeath
  causeOfDeathMethod?: GQLCauseOfDeathMethodType
  causeOfDeath?: string
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLPerson {
  id?: string
  _fhirID?: string
  identifier?: Array<GQLIdentityType | null>
  name?: Array<GQLHumanName | null>
  telecom?: Array<GQLContactPoint | null>
  gender?: string
  birthDate?: string
  maritalStatus?: GQLMaritalStatusType
  occupation?: string
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddress | null>
  photo?: Array<GQLAttachment | null>
  deceased?: GQLDeceased
  nationality?: Array<string | null>
  educationalAttainment?: GQLEducationType
}

export interface GQLBirthRegResultSet {
  results?: Array<GQLBirthRegistration | null>
  totalItems?: number
}

export interface GQLEventRegistration {
  id: string
  registration?: GQLRegistration
  createdAt?: GQLDate
}

/** Use this to resolve interface type EventRegistration */
export type GQLPossibleEventRegistrationTypeNames =
  | 'BirthRegistration'
  | 'DeathRegistration'

export interface GQLEventRegistrationNameMap {
  EventRegistration: GQLEventRegistration
  BirthRegistration: GQLBirthRegistration
  DeathRegistration: GQLDeathRegistration
}

export interface GQLRegistrationCountResult {
  results: Array<GQLStatusWiseRegistrationCount | null>
  total: number
}

export interface GQLLocation {
  id: string
  _fhirID?: string
  identifier?: Array<GQLIdentifier | null>
  status?: string
  name?: string
  alias?: Array<string | null>
  description?: string
  partOf?: string
  type?: GQLLocationType
  telecom?: Array<GQLContactPoint | null>
  address?: GQLAddress
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
}

export interface GQLUser {
  id?: string
  userMgntUserID?: string
  practitionerId?: string
  name?: Array<GQLHumanName | null>
  username?: string
  mobile?: string
  role?: string
  type?: string
  email?: string
  status?: string
  underInvestigation?: boolean
  primaryOffice?: GQLLocation
  catchmentArea?: Array<GQLLocation | null>
  localRegistrar: GQLLocalRegistrar
  identifier?: GQLIdentifier
  signature?: GQLSignature
  creationDate?: string
}

export interface GQLSearchUserResult {
  results?: Array<GQLUser | null>
  totalItems?: number
}

export interface GQLSearchFieldAgentResult {
  results?: Array<GQLSearchFieldAgentResponse | null>
  totalItems?: number
}

export interface GQLVerifyPasswordResult {
  mobile?: string
  scrope?: Array<string | null>
  status?: string
  username?: string
  id?: string
}

export interface GQLRegistrationMetrics {
  genderBasisMetrics?: GQLRegistrationGenderBasisMetrics
  timeFrames?: GQLRegistrationTimeFrameMetrics
  estimated45DayMetrics?: GQLRegistration45DayEstimatedMetrics
  payments?: GQLCertificationPaymentMetrics
}

export interface GQLEventEstimationMetrics {
  birth45DayMetrics?: GQLEstimationMetrics
  death45DayMetrics?: GQLEstimationMetrics
}

export interface GQLApplicationsStartedMetrics {
  fieldAgentApplications: number
  hospitalApplications: number
  officeApplications: number
}

export interface GQLMonthWiseEstimationMetrics {
  details?: Array<GQLMonthWise45DayEstimation | null>
  total?: GQLEventIn45DayEstimationCount
}

export interface GQLLocationWiseEstimationMetrics {
  details?: Array<GQLLocationWise45DayEstimation | null>
  total?: GQLEventIn45DayEstimationCount
}

export interface GQLTimeLoggedMetricsResultSet {
  results?: Array<GQLTimeLoggedMetrics | null>
  totalItems?: number
}

export interface GQLEventSearchResultSet {
  results?: Array<GQLEventSearchSet | null>
  totalItems?: number
}

export interface GQLEventProgressResultSet {
  results?: Array<GQLEventProgressSet | null>
  totalItems?: number
}

export interface GQLRole {
  id: string
  title?: string
  value?: string
  types?: Array<string | null>
  active?: boolean
}

export interface GQLNotificationInput {
  child?: GQLPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  informant?: GQLPersonInput
  location?: GQLLocationInput
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLCreatedIds {
  compositionId?: string
  trackingId?: string
  registrationNumber?: string
}

export interface GQLBirthRegistrationInput {
  _fhirIDMap?: GQLMap
  registration?: GQLRegistrationInput
  child?: GQLPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  informant?: GQLRelatedPersonInput
  vaccination?: GQLVaccinationInput
  eventLocation?: GQLLocationInput
  birthType?: GQLBirthType
  weightAtBirth?: number
  heightAtBirth?: number
  attendantAtBirth?: GQLAttendantType
  otherAttendantAtBirth?: string
  birthRegistrationType?: GQLBirthRegType
  presentAtBirthRegistration?: GQLBirthRegPresence
  otherPresentAtBirthRegistration?: string
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  primaryCaregiver?: GQLPrimaryCaregiverInput
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLDeathRegistrationInput {
  _fhirIDMap?: GQLMap
  registration?: GQLRegistrationInput
  deceased?: GQLPersonInput
  informant?: GQLRelatedPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  spouse?: GQLPersonInput
  eventLocation?: GQLLocationInput
  mannerOfDeath?: GQLMannerOfDeath
  causeOfDeathMethod?: GQLCauseOfDeathMethodType
  causeOfDeath?: string
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLUserInput {
  id?: string
  name?: Array<GQLHumanNameInput | null>
  identifier?: Array<GQLUserIdentifierInput | null>
  username?: string
  mobile?: string
  role?: string
  type?: string
  email?: string
  primaryOffice?: string
  catchmentArea?: Array<string | null>
  device?: string
  signature?: GQLSignatureInput
}

export interface GQLSecurityQuestionAnswer {
  questionKey?: string
  answer?: string
}

export type GQLMap = any

export interface GQLRegistration {
  id?: string
  _fhirID?: string
  draftId?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  contact?: GQLRegistrationContactType
  contactRelationship?: string
  contactPhoneNumber?: string
  status?: Array<GQLRegWorkflow | null>
  type?: GQLRegistrationType
  inCompleteFields?: string
  attachments?: Array<GQLAttachment | null>
  certificates?: Array<GQLCertificate | null>
  duplicates?: Array<string | null>
}

export interface GQLRelatedPerson {
  id?: string
  _fhirID?: string
  relationship?: GQLRelationshipType
  otherRelationship?: string
  affidavit?: Array<GQLAttachment | null>
  individual?: GQLPerson
}

export interface GQLVaccination {
  _fhirID?: string
  manufacturer?: Array<string | null>
  priorityGroup?: Array<string | null>
  batchNumber?: string
  notes?: string
  doseGiven1?: string
}

export const enum GQLBirthType {
  SINGLE = 'SINGLE',
  TWIN = 'TWIN',
  TRIPLET = 'TRIPLET',
  QUADRUPLET = 'QUADRUPLET',
  HIGHER_MULTIPLE_DELIVERY = 'HIGHER_MULTIPLE_DELIVERY'
}

export const enum GQLAttendantType {
  PHYSICIAN = 'PHYSICIAN',
  NURSE = 'NURSE',
  NURSE_MIDWIFE = 'NURSE_MIDWIFE',
  MIDWIFE = 'MIDWIFE',
  OTHER_PARAMEDICAL_PERSONNEL = 'OTHER_PARAMEDICAL_PERSONNEL',
  TRADITIONAL_BIRTH_ATTENDANT = 'TRADITIONAL_BIRTH_ATTENDANT',
  LAYPERSON = 'LAYPERSON',
  NONE = 'NONE',
  OTHER = 'OTHER'
}

export const enum GQLBirthRegType {
  BOTH_PARENTS = 'BOTH_PARENTS',
  SELF = 'SELF',
  INFORMANT_ONLY = 'INFORMANT_ONLY',
  MOTHER_ONLY = 'MOTHER_ONLY',
  FATHER_ONLY = 'FATHER_ONLY'
}

export const enum GQLBirthRegPresence {
  BOTH_PARENTS = 'BOTH_PARENTS',
  INFORMANT = 'INFORMANT',
  MOTHER = 'MOTHER',
  FATHER = 'FATHER',
  OTHER = 'OTHER',
  SELF = 'SELF'
}

export interface GQLPrimaryCaregiver {
  primaryCaregiver?: GQLPerson
  reasonsNotApplying?: Array<GQLReasonsNotApplying | null>
  parentDetailsType?: GQLParentDetailsType
}

export const enum GQLMannerOfDeath {
  NATURAL_CAUSES = 'NATURAL_CAUSES',
  ACCIDENT = 'ACCIDENT',
  SUICIDE = 'SUICIDE',
  HOMICIDE = 'HOMICIDE',
  UNDETERMINED = 'UNDETERMINED'
}

export const enum GQLCauseOfDeathMethodType {
  VERBAL_AUTOPSY = 'VERBAL_AUTOPSY',
  MEDICALLY_CERTIFIED = 'MEDICALLY_CERTIFIED'
}

export interface GQLIdentityType {
  id?: string
  type?: GQLIdentityIDType
  otherType?: string
}

export interface GQLHumanName {
  use?: string
  firstNames?: string
  familyName?: string
  baptismalName?: string
}

export interface GQLContactPoint {
  system?: string
  value?: string
  use?: string
}

export const enum GQLMaritalStatusType {
  SINGLE = 'SINGLE',
  MARRIED = 'MARRIED',
  WIDOWED = 'WIDOWED',
  DIVORCED = 'DIVORCED',
  NOT_STATED = 'NOT_STATED',
  SEPARATED = 'SEPARATED'
}

export interface GQLAddress {
  use?: string
  type?: GQLAddressType
  text?: string
  line?: Array<string | null>
  lineName?: Array<string | null>
  city?: string
  district?: string
  districtName?: string
  state?: string
  stateName?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
}

export interface GQLAttachment {
  id: string
  _fhirID?: string
  contentType?: string
  data?: string
  status?: string
  originalFileName?: string
  systemFileName?: string
  type?: GQLAttachmentType
  description?: string
  subject?: GQLAttachmentSubject
  createdAt?: GQLDate
}

export interface GQLDeceased {
  deceased?: boolean
  deathDate?: string
}

export const enum GQLEducationType {
  NO_SCHOOLING = 'NO_SCHOOLING',
  PRIMARY_ISCED_1 = 'PRIMARY_ISCED_1',
  LOWER_SECONDARY_ISCED_2 = 'LOWER_SECONDARY_ISCED_2',
  UPPER_SECONDARY_ISCED_3 = 'UPPER_SECONDARY_ISCED_3',
  POST_SECONDARY_ISCED_4 = 'POST_SECONDARY_ISCED_4',
  FIRST_STAGE_TERTIARY_ISCED_5 = 'FIRST_STAGE_TERTIARY_ISCED_5',
  SECOND_STAGE_TERTIARY_ISCED_6 = 'SECOND_STAGE_TERTIARY_ISCED_6',
  NOT_STATED = 'NOT_STATED'
}

export interface GQLStatusWiseRegistrationCount {
  status: string
  count: number
}

export interface GQLIdentifier {
  system?: string
  value?: string
}

export const enum GQLLocationType {
  HEALTH_FACILITY = 'HEALTH_FACILITY',
  HOSPITAL = 'HOSPITAL',
  OTHER_HEALTH_INSTITUTION = 'OTHER_HEALTH_INSTITUTION',
  ADMIN_STRUCTURE = 'ADMIN_STRUCTURE',
  CRVS_OFFICE = 'CRVS_OFFICE',
  PRIVATE_HOME = 'PRIVATE_HOME',
  CURRENT = 'CURRENT',
  PERMANENT = 'PERMANENT',
  MILITARY_BASE_OR_CANTONMENT = 'MILITARY_BASE_OR_CANTONMENT',
  IDP_CAMP = 'IDP_CAMP',
  UNHCR_CAMP = 'UNHCR_CAMP',
  OTHER = 'OTHER'
}

export interface GQLLocalRegistrar {
  name: Array<GQLHumanName | null>
  role: string
  signature?: GQLSignature
}

export interface GQLSignature {
  data?: string
  type?: string
}

export interface GQLSearchFieldAgentResponse {
  practitionerId?: string
  fullName?: string
  type?: string
  status?: string
  primaryOfficeId?: string
  creationDate?: string
  totalNumberOfApplicationStarted?: number
  totalNumberOfInProgressAppStarted?: number
  totalNumberOfRejectedApplications?: number
  averageTimeForDeclaredApplications?: number
}

export interface GQLRegistrationGenderBasisMetrics {
  details?: Array<GQLGenderBasisDetailsMetrics>
  total?: GQLGenderBasisTotalCount
}

export interface GQLRegistrationTimeFrameMetrics {
  details?: Array<GQLTimeFrameDetailMetrics>
  total?: GQLTimeFrameTotalCount
}

export interface GQLRegistration45DayEstimatedMetrics {
  details?: Array<GQLEstimated45DayMetrics>
  total?: GQLEstimate45DayTotalCount
}

export interface GQLCertificationPaymentMetrics {
  details?: Array<GQLCertificationPaymentDetailsMetrics>
  total?: GQLCertificationPaymentTotalCount
}

export interface GQLEstimationMetrics {
  actualRegistration: number
  estimatedRegistration: number
  estimatedPercentage: number
  malePercentage: number
  femalePercentage: number
}

export interface GQLMonthWise45DayEstimation {
  actualTotalRegistration: number
  actual45DayRegistration: number
  estimatedRegistration: number
  estimated45DayPercentage: number
  month: string
  year: string
  startOfMonth: string
  endOfMonth: string
}

export interface GQLEventIn45DayEstimationCount {
  actualTotalRegistration: number
  actual45DayRegistration: number
  estimatedRegistration: number
  estimated45DayPercentage: number
}

export interface GQLLocationWise45DayEstimation {
  actualTotalRegistration: number
  actual45DayRegistration: number
  estimatedRegistration: number
  estimated45DayPercentage: number
  locationId: string
  locationName: string
}

export interface GQLTimeLoggedMetrics {
  status: string
  trackingId?: string
  eventType: string
  time: string
}

export interface GQLEventSearchSet {
  id: string
  type?: string
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

/** Use this to resolve interface type EventSearchSet */
export type GQLPossibleEventSearchSetTypeNames =
  | 'BirthEventSearchSet'
  | 'DeathEventSearchSet'

export interface GQLEventSearchSetNameMap {
  EventSearchSet: GQLEventSearchSet
  BirthEventSearchSet: GQLBirthEventSearchSet
  DeathEventSearchSet: GQLDeathEventSearchSet
}

export interface GQLEventProgressSet {
  id: string
  type?: string
  name?: Array<GQLHumanName | null>
  dateOfEvent?: GQLDate
  registration?: GQLRegistrationSearchSet
  startedBy?: GQLUser
  startedByFacility?: string
  startedAt?: GQLDate
  progressReport?: GQLEventProgressData
}

export interface GQLPersonInput {
  _fhirID?: string
  identifier?: Array<GQLIdentityInput | null>
  name?: Array<GQLHumanNameInput | null>
  telecom?: Array<GQLContactPointInput | null>
  gender?: string
  birthDate?: string
  maritalStatus?: GQLMaritalStatusType
  occupation?: string
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddressInput | null>
  photo?: Array<GQLAttachmentInput | null>
  deceased?: GQLDeceasedInput
  nationality?: Array<string | null>
  educationalAttainment?: GQLEducationType
  individual?: GQLPersonInput
}

export interface GQLLocationInput {
  _fhirID?: string
  identifier?: Array<string | null>
  status?: string
  name?: string
  alias?: Array<string | null>
  description?: string
  partOf?: string
  type?: GQLLocationType
  telecom?: Array<GQLContactPointInput | null>
  address?: GQLAddressInput
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
}

export interface GQLRegistrationInput {
  _fhirID?: string
  draftId?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  contact?: GQLRegistrationContactType
  contactRelationship?: string
  contactPhoneNumber?: string
  status?: Array<GQLRegWorkflowInput | null>
  type?: GQLRegistrationType
  inCompleteFields?: string
  attachments?: Array<GQLAttachmentInput | null>
  certificates?: Array<GQLCertificateInput | null>
  location?: GQLLocationInput
}

export interface GQLRelatedPersonInput {
  id?: string
  _fhirID?: string
  relationship?: GQLRelationshipType
  otherRelationship?: string
  affidavit?: Array<GQLAttachmentInput | null>
  individual?: GQLPersonInput
}

export interface GQLVaccinationInput {
  _fhirID?: string
  manufacturer?: Array<string | null>
  priorityGroup?: Array<string | null>
  batchNumber?: string
  notes?: string
  doseGiven1?: string
  reaction?: string
  expiryDate1?: GQLDate
}

export interface GQLPrimaryCaregiverInput {
  primaryCaregiver?: GQLPersonInput
  reasonsNotApplying?: Array<GQLReasonsNotApplyingInput | null>
  parentDetailsType?: GQLParentDetailsType
}

export interface GQLHumanNameInput {
  use?: string
  firstNames?: string
  familyName?: string
  baptismalName?: string
}

export interface GQLUserIdentifierInput {
  use?: string
  system?: string
  value?: string
}

export interface GQLSignatureInput {
  data?: string
  type?: string
}

export const enum GQLRegistrationContactType {
  BOTH = 'BOTH',
  MOTHER = 'MOTHER',
  FATHER = 'FATHER',
  OTHER = 'OTHER',
  APPLICANT = 'APPLICANT',
  SELF = 'SELF'
}

export interface GQLRegWorkflow {
  id: string
  type?: GQLRegStatus
  user?: GQLUser
  timestamp?: GQLDate
  comments?: Array<GQLComment | null>
  location?: GQLLocation
  office?: GQLLocation
  timeLogged?: number
}

export const enum GQLRegistrationType {
  BIRTH = 'BIRTH',
  DEATH = 'DEATH'
}

export interface GQLCertificate {
  collector?: GQLRelatedPerson
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPayment | null>
  data?: string
}

export const enum GQLRelationshipType {
  FATHER = 'FATHER',
  MOTHER = 'MOTHER',
  SPOUSE = 'SPOUSE',
  SON = 'SON',
  DAUGHTER = 'DAUGHTER',
  SON_IN_LAW = 'SON_IN_LAW',
  DAUGHTER_IN_LAW = 'DAUGHTER_IN_LAW',
  EXTENDED_FAMILY = 'EXTENDED_FAMILY',
  OTHER = 'OTHER',
  INFORMANT = 'INFORMANT',
  GRANDFATHER = 'GRANDFATHER',
  GRANDMOTHER = 'GRANDMOTHER',
  GRANDSON = 'GRANDSON',
  GRANDDAUGHTER = 'GRANDDAUGHTER',
  BROTHER = 'BROTHER',
  SISTER = 'SISTER',
  OTHER_FAMILY_MEMBER = 'OTHER_FAMILY_MEMBER',
  INSTITUTION_HEAD_PLACE_OF_BIRTH = 'INSTITUTION_HEAD_PLACE_OF_BIRTH',
  HOUSE_OWNER = 'HOUSE_OWNER',
  OPERATOR = 'OPERATOR',
  OFFICE_IN_CHARGE = 'OFFICE_IN_CHARGE',
  LEGAL_GUARDIAN = 'LEGAL_GUARDIAN',
  BOTH_PARENTS = 'BOTH_PARENTS',
  HEAD_OF_THE_INSTITUTE = 'HEAD_OF_THE_INSTITUTE',
  OWNER_OF_THE_HOUSE = 'OWNER_OF_THE_HOUSE',
  DRIVER_OF_THE_VEHICLE = 'DRIVER_OF_THE_VEHICLE',
  OFFICER_IN_CHARGE = 'OFFICER_IN_CHARGE'
}

export interface GQLReasonsNotApplying {
  primaryCaregiverType?: GQLPrimaryCaregiverType
  reasonNotApplying?: string
  isDeceased?: boolean
}

export const enum GQLParentDetailsType {
  MOTHER_AND_FATHER = 'MOTHER_AND_FATHER',
  MOTHER_ONLY = 'MOTHER_ONLY',
  FATHER_ONLY = 'FATHER_ONLY',
  NONE = 'NONE'
}

export const enum GQLIdentityIDType {
  PASSPORT = 'PASSPORT',
  MY_CHILD_ID = 'MY_CHILD_ID',
  NATIONAL_ID = 'NATIONAL_ID',
  DRIVING_LICENSE = 'DRIVING_LICENSE',
  BIRTH_REGISTRATION_NUMBER = 'BIRTH_REGISTRATION_NUMBER',
  DEATH_REGISTRATION_NUMBER = 'DEATH_REGISTRATION_NUMBER',
  REFUGEE_NUMBER = 'REFUGEE_NUMBER',
  ALIEN_NUMBER = 'ALIEN_NUMBER',
  OTHER = 'OTHER',
  NO_ID = 'NO_ID',
  SOCIAL_SECURITY_NO = 'SOCIAL_SECURITY_NO'
}

export const enum GQLAddressType {
  HEALTH_FACILITY = 'HEALTH_FACILITY',
  ADMIN_STRUCTURE = 'ADMIN_STRUCTURE',
  CRVS_OFFICE = 'CRVS_OFFICE',
  PRIVATE_HOME = 'PRIVATE_HOME',
  PLACE_OF_HERITAGE = 'PLACE_OF_HERITAGE',
  CURRENT = 'CURRENT',
  PERMANENT = 'PERMANENT',
  MILITARY_BASE_OR_CANTONMENT = 'MILITARY_BASE_OR_CANTONMENT',
  IDP_CAMP = 'IDP_CAMP',
  UNHCR_CAMP = 'UNHCR_CAMP',
  OTHER = 'OTHER'
}

export const enum GQLAttachmentType {
  PASSPORT = 'PASSPORT',
  NATIONAL_ID_FRONT = 'NATIONAL_ID_FRONT',
  NATIONAL_ID_BACK = 'NATIONAL_ID_BACK',
  IMMUNISATION_CERTIFICATE = 'IMMUNISATION_CERTIFICATE',
  PAPER_FORM = 'PAPER_FORM',
  PASSPORT_PHOTO = 'PASSPORT_PHOTO',
  BIRTH_REGISTRATION = 'BIRTH_REGISTRATION',
  SCHOOL_CERTIFICATE = 'SCHOOL_CERTIFICATE',
  PROOF_OF_DEATH = 'PROOF_OF_DEATH',
  OTHER = 'OTHER',
  POST_MORTEM_CERTIFICATE = 'POST_MORTEM_CERTIFICATE',
  HOSPITAL_DISCHARGE_CERTIFICATE = 'HOSPITAL_DISCHARGE_CERTIFICATE',
  ATTESTED_DEATH_LETTER = 'ATTESTED_DEATH_LETTER',
  ATTESTED_DEATH_CERTIFICATE = 'ATTESTED_DEATH_CERTIFICATE',
  BURIAL_RECEIPT = 'BURIAL_RECEIPT',
  FUNERAL_RECEIPT = 'FUNERAL_RECEIPT',
  DOCTOR_CERTIFICATE = 'DOCTOR_CERTIFICATE',
  EPI_CARD = 'EPI_CARD',
  EPI_STAFF_CERTIFICATE = 'EPI_STAFF_CERTIFICATE',
  BIRTH_PLACE_DATE_PROOF = 'BIRTH_PLACE_DATE_PROOF',
  DISCHARGE_CERTIFICATE = 'DISCHARGE_CERTIFICATE',
  MEDICAL_INSTITUTION = 'MEDICAL_INSTITUTION',
  BIRTH_ATTENDANT = 'BIRTH_ATTENDANT',
  TAX_RECEIPT = 'TAX_RECEIPT',
  BROUGHT_IN_DEAD_CERTIFICATE = 'BROUGHT_IN_DEAD_CERTIFICATE',
  CORONERS_REPORT = 'CORONERS_REPORT',
  SIGNED_AFFIDAVIT = 'SIGNED_AFFIDAVIT',
  DECEASED_BIRTH_PROOF_PAPER = 'DECEASED_BIRTH_PROOF_PAPER',
  ORIGINAL_BIRTH_RECORD = 'ORIGINAL_BIRTH_RECORD',
  UNDER_FIVE_CARD = 'UNDER_FIVE_CARD',
  PROOF_OF_LEGAL_GUARDIANSHIP = 'PROOF_OF_LEGAL_GUARDIANSHIP',
  PROOF_OF_ASSIGNED_RESPONSIBILITY = 'PROOF_OF_ASSIGNED_RESPONSIBILITY',
  LETTER_FROM_COUNCILLOR = 'LETTER_FROM_COUNCILLOR'
}

export const enum GQLAttachmentSubject {
  MOTHER = 'MOTHER',
  FATHER = 'FATHER',
  CHILD = 'CHILD',
  OTHER = 'OTHER',
  PARENT = 'PARENT',
  CHILD_AGE = 'CHILD_AGE',
  DECEASED_ID_PROOF = 'DECEASED_ID_PROOF',
  DECEASED_PARMANENT_ADDRESS_PROOF = 'DECEASED_PARMANENT_ADDRESS_PROOF',
  DECEASED_DEATH_PROOF = 'DECEASED_DEATH_PROOF',
  DECEASED_BIRTH_PROOF = 'DECEASED_BIRTH_PROOF',
  APPLICANT_ID_PROOF = 'APPLICANT_ID_PROOF',
  APPLICANT_ATHORITY_TO_APPLY_PROOF = 'APPLICANT_ATHORITY_TO_APPLY_PROOF',
  LEGAL_GUARDIAN_PROOF = 'LEGAL_GUARDIAN_PROOF',
  ASSIGNED_RESPONSIBILITY_PROOF = 'ASSIGNED_RESPONSIBILITY_PROOF',
  WARD_COUNCILLOR_PROOF = 'WARD_COUNCILLOR_PROOF'
}

export interface GQLGenderBasisDetailsMetrics {
  location: string
  maleUnder18: number
  femaleUnder18: number
  maleOver18: number
  femaleOver18: number
  total: number
}

export interface GQLGenderBasisTotalCount {
  maleUnder18: number
  femaleUnder18: number
  maleOver18: number
  femaleOver18: number
  total: number
}

export interface GQLTimeFrameDetailMetrics {
  locationId: string
  regWithin45d: number
  regWithin45dTo1yr: number
  regWithin1yrTo5yr: number
  regOver5yr: number
  total: number
}

export interface GQLTimeFrameTotalCount {
  regWithin45d: number
  regWithin45dTo1yr: number
  regWithin1yrTo5yr: number
  regOver5yr: number
  total: number
}

export interface GQLEstimated45DayMetrics {
  locationId: string
  estimatedRegistration: number
  registrationIn45Day: number
  estimationYear: number
  estimationLocationLevel: string
  estimationPercentage: number
}

export interface GQLEstimate45DayTotalCount {
  estimatedRegistration: number
  registrationIn45Day: number
  estimationPercentage: number
}

export interface GQLCertificationPaymentDetailsMetrics {
  total: number
  locationId: string
}

export interface GQLCertificationPaymentTotalCount {
  total: number
}

export interface GQLRegistrationSearchSet {
  status?: string
  contactNumber?: string
  contactRelationship?: string
  dateOfApplication?: GQLDate
  trackingId?: string
  registrationNumber?: string
  eventLocationId?: string
  registeredLocationId?: string
  reason?: string
  comment?: string
  duplicates?: Array<string | null>
  createdAt?: string
  modifiedAt?: string
}

export interface GQLOperationHistorySearchSet {
  operationType?: string
  operatedOn?: GQLDate
  operatorRole?: string
  operatorName?: Array<GQLHumanName | null>
  operatorOfficeName?: string
  operatorOfficeAlias?: Array<string | null>
  notificationFacilityName?: string
  notificationFacilityAlias?: Array<string | null>
  rejectReason?: string
  rejectComment?: string
}

export interface GQLBirthEventSearchSet extends GQLEventSearchSet {
  id: string
  type?: string
  childName?: Array<GQLHumanName | null>
  dateOfBirth?: GQLDate
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

export interface GQLDeathEventSearchSet extends GQLEventSearchSet {
  id: string
  type?: string
  deceasedName?: Array<GQLHumanName | null>
  dateOfDeath?: GQLDate
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

export interface GQLEventProgressData {
  timeInProgress?: number
  timeInReadyForReview?: number
  timeInRequiresUpdates?: number
  timeInWaitingForApproval?: number
  timeInWaitingForBRIS?: number
  timeInReadyToPrint?: number
}

export interface GQLIdentityInput {
  id?: string
  type?: GQLIdentityIDType
  otherType?: string
}

export interface GQLContactPointInput {
  system?: string
  value?: string
  use?: string
}

export interface GQLAddressInput {
  use?: string
  type?: GQLAddressType
  text?: string
  line?: Array<string | null>
  city?: string
  district?: string
  state?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
}

export interface GQLAttachmentInput {
  _fhirID?: string
  contentType?: string
  data?: string
  status?: string
  originalFileName?: string
  systemFileName?: string
  type?: GQLAttachmentType
  description?: string
  subject?: GQLAttachmentSubject
  createdAt?: GQLDate
}

export interface GQLDeceasedInput {
  deceased?: boolean
  deathDate?: string
}

export interface GQLRegWorkflowInput {
  type?: GQLRegStatus
  user?: GQLUserInput
  timestamp?: GQLDate
  comments?: Array<GQLCommentInput | null>
  location?: GQLLocationInput
  timeLoggedMS?: number
}

export interface GQLCertificateInput {
  collector?: GQLRelatedPersonInput
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPaymentInput | null>
  data?: string
}

export interface GQLReasonsNotApplyingInput {
  primaryCaregiverType?: GQLPrimaryCaregiverType
  reasonNotApplying?: string
  isDeceased?: boolean
}

export const enum GQLRegStatus {
  IN_PROGRESS = 'IN_PROGRESS',
  DECLARED = 'DECLARED',
  WAITING_VALIDATION = 'WAITING_VALIDATION',
  VALIDATED = 'VALIDATED',
  REGISTERED = 'REGISTERED',
  CERTIFIED = 'CERTIFIED',
  REJECTED = 'REJECTED'
}

export interface GQLComment {
  id: string
  user?: GQLUser
  comment?: string
  createdAt?: GQLDate
}

export interface GQLPayment {
  paymentId?: string
  type?: GQLPaymentType
  total?: number
  amount?: number
  outcome?: GQLPaymentOutcomeType
  date?: GQLDate
}

export const enum GQLPrimaryCaregiverType {
  MOTHER_AND_FATHER = 'MOTHER_AND_FATHER',
  MOTHER = 'MOTHER',
  FATHER = 'FATHER',
  INFORMANT = 'INFORMANT',
  LEGAL_GUARDIAN = 'LEGAL_GUARDIAN',
  OTHER = 'OTHER'
}

export interface GQLCommentInput {
  user?: GQLUserInput
  comment?: string
  createdAt?: GQLDate
}

export interface GQLPaymentInput {
  paymentId?: string
  type?: GQLPaymentType
  total?: number
  amount?: number
  outcome?: GQLPaymentOutcomeType
  date?: GQLDate
}

export const enum GQLPaymentType {
  MANUAL = 'MANUAL'
}

export const enum GQLPaymentOutcomeType {
  COMPLETED = 'COMPLETED',
  ERROR = 'ERROR',
  PARTIAL = 'PARTIAL'
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver
  Mutation?: GQLMutationTypeResolver
  Dummy?: GQLDummyTypeResolver
  Notification?: GQLNotificationTypeResolver
  Date?: GraphQLScalarType
  BirthRegistration?: GQLBirthRegistrationTypeResolver
  DeathRegistration?: GQLDeathRegistrationTypeResolver
  Person?: GQLPersonTypeResolver
  BirthRegResultSet?: GQLBirthRegResultSetTypeResolver
  EventRegistration?: {
    __resolveType: GQLEventRegistrationTypeResolver
  }

  RegistrationCountResult?: GQLRegistrationCountResultTypeResolver
  Location?: GQLLocationTypeResolver
  User?: GQLUserTypeResolver
  SearchUserResult?: GQLSearchUserResultTypeResolver
  SearchFieldAgentResult?: GQLSearchFieldAgentResultTypeResolver
  VerifyPasswordResult?: GQLVerifyPasswordResultTypeResolver
  RegistrationMetrics?: GQLRegistrationMetricsTypeResolver
  EventEstimationMetrics?: GQLEventEstimationMetricsTypeResolver
  ApplicationsStartedMetrics?: GQLApplicationsStartedMetricsTypeResolver
  MonthWiseEstimationMetrics?: GQLMonthWiseEstimationMetricsTypeResolver
  LocationWiseEstimationMetrics?: GQLLocationWiseEstimationMetricsTypeResolver
  TimeLoggedMetricsResultSet?: GQLTimeLoggedMetricsResultSetTypeResolver
  EventSearchResultSet?: GQLEventSearchResultSetTypeResolver
  EventProgressResultSet?: GQLEventProgressResultSetTypeResolver
  Role?: GQLRoleTypeResolver
  CreatedIds?: GQLCreatedIdsTypeResolver
  Map?: GraphQLScalarType
  Registration?: GQLRegistrationTypeResolver
  RelatedPerson?: GQLRelatedPersonTypeResolver
  Vaccination?: GQLVaccinationTypeResolver
  PrimaryCaregiver?: GQLPrimaryCaregiverTypeResolver
  IdentityType?: GQLIdentityTypeTypeResolver
  HumanName?: GQLHumanNameTypeResolver
  ContactPoint?: GQLContactPointTypeResolver
  Address?: GQLAddressTypeResolver
  Attachment?: GQLAttachmentTypeResolver
  Deceased?: GQLDeceasedTypeResolver
  StatusWiseRegistrationCount?: GQLStatusWiseRegistrationCountTypeResolver
  Identifier?: GQLIdentifierTypeResolver
  LocalRegistrar?: GQLLocalRegistrarTypeResolver
  Signature?: GQLSignatureTypeResolver
  SearchFieldAgentResponse?: GQLSearchFieldAgentResponseTypeResolver
  RegistrationGenderBasisMetrics?: GQLRegistrationGenderBasisMetricsTypeResolver
  RegistrationTimeFrameMetrics?: GQLRegistrationTimeFrameMetricsTypeResolver
  Registration45DayEstimatedMetrics?: GQLRegistration45DayEstimatedMetricsTypeResolver
  CertificationPaymentMetrics?: GQLCertificationPaymentMetricsTypeResolver
  EstimationMetrics?: GQLEstimationMetricsTypeResolver
  MonthWise45DayEstimation?: GQLMonthWise45DayEstimationTypeResolver
  EventIn45DayEstimationCount?: GQLEventIn45DayEstimationCountTypeResolver
  LocationWise45DayEstimation?: GQLLocationWise45DayEstimationTypeResolver
  TimeLoggedMetrics?: GQLTimeLoggedMetricsTypeResolver
  EventSearchSet?: {
    __resolveType: GQLEventSearchSetTypeResolver
  }

  EventProgressSet?: GQLEventProgressSetTypeResolver
  RegWorkflow?: GQLRegWorkflowTypeResolver
  Certificate?: GQLCertificateTypeResolver
  ReasonsNotApplying?: GQLReasonsNotApplyingTypeResolver
  GenderBasisDetailsMetrics?: GQLGenderBasisDetailsMetricsTypeResolver
  GenderBasisTotalCount?: GQLGenderBasisTotalCountTypeResolver
  TimeFrameDetailMetrics?: GQLTimeFrameDetailMetricsTypeResolver
  TimeFrameTotalCount?: GQLTimeFrameTotalCountTypeResolver
  Estimated45DayMetrics?: GQLEstimated45DayMetricsTypeResolver
  Estimate45DayTotalCount?: GQLEstimate45DayTotalCountTypeResolver
  CertificationPaymentDetailsMetrics?: GQLCertificationPaymentDetailsMetricsTypeResolver
  CertificationPaymentTotalCount?: GQLCertificationPaymentTotalCountTypeResolver
  RegistrationSearchSet?: GQLRegistrationSearchSetTypeResolver
  OperationHistorySearchSet?: GQLOperationHistorySearchSetTypeResolver
  BirthEventSearchSet?: GQLBirthEventSearchSetTypeResolver
  DeathEventSearchSet?: GQLDeathEventSearchSetTypeResolver
  EventProgressData?: GQLEventProgressDataTypeResolver
  Comment?: GQLCommentTypeResolver
  Payment?: GQLPaymentTypeResolver
}
export interface GQLQueryTypeResolver<TParent = any> {
  listNotifications?: QueryToListNotificationsResolver<TParent>
  fetchBirthRegistration?: QueryToFetchBirthRegistrationResolver<TParent>
  searchBirthRegistrations?: QueryToSearchBirthRegistrationsResolver<TParent>
  searchDeathRegistrations?: QueryToSearchDeathRegistrationsResolver<TParent>
  queryRegistrationByIdentifier?: QueryToQueryRegistrationByIdentifierResolver<
    TParent
  >
  queryPersonByIdentifier?: QueryToQueryPersonByIdentifierResolver<TParent>
  listBirthRegistrations?: QueryToListBirthRegistrationsResolver<TParent>
  fetchDeathRegistration?: QueryToFetchDeathRegistrationResolver<TParent>
  fetchEventRegistration?: QueryToFetchEventRegistrationResolver<TParent>
  fetchRegistration?: QueryToFetchRegistrationResolver<TParent>
  queryPersonByNidIdentifier?: QueryToQueryPersonByNidIdentifierResolver<
    TParent
  >
  fetchRegistrationCountByStatus?: QueryToFetchRegistrationCountByStatusResolver<
    TParent
  >
  locationsByParent?: QueryToLocationsByParentResolver<TParent>
  locationById?: QueryToLocationByIdResolver<TParent>
  hasChildLocation?: QueryToHasChildLocationResolver<TParent>
  getUser?: QueryToGetUserResolver<TParent>
  searchUsers?: QueryToSearchUsersResolver<TParent>
  searchFieldAgents?: QueryToSearchFieldAgentsResolver<TParent>
  verifyPasswordById?: QueryToVerifyPasswordByIdResolver<TParent>
  fetchRegistrationMetrics?: QueryToFetchRegistrationMetricsResolver<TParent>
  getEventEstimationMetrics?: QueryToGetEventEstimationMetricsResolver<TParent>
  getApplicationsStartedMetrics?: QueryToGetApplicationsStartedMetricsResolver<
    TParent
  >
  fetchMonthWiseEventMetrics?: QueryToFetchMonthWiseEventMetricsResolver<
    TParent
  >
  fetchLocationWiseEventMetrics?: QueryToFetchLocationWiseEventMetricsResolver<
    TParent
  >
  fetchTimeLoggedMetricsByPractitioner?: QueryToFetchTimeLoggedMetricsByPractitionerResolver<
    TParent
  >
  searchEvents?: QueryToSearchEventsResolver<TParent>
  getEventsWithProgress?: QueryToGetEventsWithProgressResolver<TParent>
  getRoles?: QueryToGetRolesResolver<TParent>
}

export interface QueryToListNotificationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
}
export interface QueryToListNotificationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListNotificationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchBirthRegistrationArgs {
  id: string
}
export interface QueryToFetchBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchBirthRegistrationsArgs {
  fromDate?: GQLDate
  toDate?: GQLDate
}
export interface QueryToSearchBirthRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSearchBirthRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchDeathRegistrationsArgs {
  fromDate?: GQLDate
  toDate?: GQLDate
}
export interface QueryToSearchDeathRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSearchDeathRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryRegistrationByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryRegistrationByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryRegistrationByIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryPersonByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryPersonByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryPersonByIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToListBirthRegistrationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
  count?: number
  skip?: number
}
export interface QueryToListBirthRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListBirthRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchDeathRegistrationArgs {
  id: string
}
export interface QueryToFetchDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchEventRegistrationArgs {
  id: string
}
export interface QueryToFetchEventRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchEventRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationArgs {
  id: string
}
export interface QueryToFetchRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryPersonByNidIdentifierArgs {
  dob?: string
  nid?: string
  country?: string
}
export interface QueryToQueryPersonByNidIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryPersonByNidIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationCountByStatusArgs {
  locationId: string
  status: Array<string | null>
}
export interface QueryToFetchRegistrationCountByStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationCountByStatusArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToLocationsByParentArgs {
  parentId?: string
  type?: string
}
export interface QueryToLocationsByParentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToLocationsByParentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToLocationByIdArgs {
  locationId?: string
}
export interface QueryToLocationByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToLocationByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToHasChildLocationArgs {
  parentId?: string
}
export interface QueryToHasChildLocationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToHasChildLocationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserArgs {
  userId?: string
}
export interface QueryToGetUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchUsersArgs {
  username?: string
  mobile?: string
  status?: string
  role?: string
  primaryOfficeId?: string
  locationId?: string
  count?: number
  skip?: number
  sort?: string
}
export interface QueryToSearchUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchUsersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchFieldAgentsArgs {
  locationId: string
  status?: string
  language?: string
  timeStart: string
  timeEnd: string
  event?: string
  count?: number
  skip?: number
  sort?: string
}
export interface QueryToSearchFieldAgentsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSearchFieldAgentsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToVerifyPasswordByIdArgs {
  id: string
  password: string
}
export interface QueryToVerifyPasswordByIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVerifyPasswordByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId: string
  event: string
}
export interface QueryToFetchRegistrationMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetEventEstimationMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId: string
}
export interface QueryToGetEventEstimationMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetEventEstimationMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetApplicationsStartedMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId: string
}
export interface QueryToGetApplicationsStartedMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetApplicationsStartedMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchMonthWiseEventMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId: string
  event: string
}
export interface QueryToFetchMonthWiseEventMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchMonthWiseEventMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchLocationWiseEventMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId: string
  event: string
}
export interface QueryToFetchLocationWiseEventMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchLocationWiseEventMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchTimeLoggedMetricsByPractitionerArgs {
  timeStart: string
  timeEnd: string
  practitionerId: string
  locationId: string
  count: number
}
export interface QueryToFetchTimeLoggedMetricsByPractitionerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchTimeLoggedMetricsByPractitionerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchEventsArgs {
  userId?: string
  locationIds?: Array<string | null>
  status?: Array<string | null>
  type?: Array<string | null>
  trackingId?: string
  registrationNumber?: string
  contactNumber?: string
  name?: string
  count?: number
  skip?: number
  sort?: string
  sortColumn?: string
}
export interface QueryToSearchEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetEventsWithProgressArgs {
  parentLocationId?: string
  count?: number
  skip?: number
  sort?: string
  status?: Array<string | null>
  type?: Array<string | null>
}
export interface QueryToGetEventsWithProgressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetEventsWithProgressArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetRolesArgs {
  title?: string
  value?: string
  type?: string
  active?: boolean
  sortBy?: string
  sortOrder?: string
}
export interface QueryToGetRolesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetRolesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMutationTypeResolver<TParent = any> {
  createNotification?: MutationToCreateNotificationResolver<TParent>
  voidNotification?: MutationToVoidNotificationResolver<TParent>
  createBirthRegistration?: MutationToCreateBirthRegistrationResolver<TParent>
  updateBirthRegistration?: MutationToUpdateBirthRegistrationResolver<TParent>
  markBirthAsVerified?: MutationToMarkBirthAsVerifiedResolver<TParent>
  markBirthAsValidated?: MutationToMarkBirthAsValidatedResolver<TParent>
  markBirthAsRegistered?: MutationToMarkBirthAsRegisteredResolver<TParent>
  markBirthAsCertified?: MutationToMarkBirthAsCertifiedResolver<TParent>
  markEventAsVoided?: MutationToMarkEventAsVoidedResolver<TParent>
  notADuplicate?: MutationToNotADuplicateResolver<TParent>
  createDeathRegistration?: MutationToCreateDeathRegistrationResolver<TParent>
  updateDeathRegistration?: MutationToUpdateDeathRegistrationResolver<TParent>
  markDeathAsVerified?: MutationToMarkDeathAsVerifiedResolver<TParent>
  markDeathAsValidated?: MutationToMarkDeathAsValidatedResolver<TParent>
  markDeathAsRegistered?: MutationToMarkDeathAsRegisteredResolver<TParent>
  markDeathAsCertified?: MutationToMarkDeathAsCertifiedResolver<TParent>
  createOrUpdateUser?: MutationToCreateOrUpdateUserResolver<TParent>
  activateUser?: MutationToActivateUserResolver<TParent>
  changePassword?: MutationToChangePasswordResolver<TParent>
  auditUser?: MutationToAuditUserResolver<TParent>
  resendSMSInvite?: MutationToResendSMSInviteResolver<TParent>
}

export interface MutationToCreateNotificationArgs {
  details: GQLNotificationInput
}
export interface MutationToCreateNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateNotificationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVoidNotificationArgs {
  id: string
}
export interface MutationToVoidNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToVoidNotificationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateBirthRegistrationArgs {
  details: GQLBirthRegistrationInput
}
export interface MutationToCreateBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateBirthRegistrationArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToUpdateBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsVerifiedArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsVerifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsValidatedArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsValidatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsValidatedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsRegisteredArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsRegisteredArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsCertifiedArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsCertifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsVoidedArgs {
  id: string
  reason: string
  comment?: string
}
export interface MutationToMarkEventAsVoidedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsVoidedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToNotADuplicateArgs {
  id: string
  duplicateId: string
}
export interface MutationToNotADuplicateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToNotADuplicateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateDeathRegistrationArgs {
  details: GQLDeathRegistrationInput
}
export interface MutationToCreateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateDeathRegistrationArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToUpdateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsVerifiedArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsVerifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsValidatedArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsValidatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsValidatedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsRegisteredArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsRegisteredArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsCertifiedArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsCertifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateOrUpdateUserArgs {
  user: GQLUserInput
}
export interface MutationToCreateOrUpdateUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateOrUpdateUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToActivateUserArgs {
  userId: string
  password: string
  securityQNAs: Array<GQLSecurityQuestionAnswer | null>
}
export interface MutationToActivateUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToActivateUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangePasswordArgs {
  userId: string
  existingPassword: string
  password: string
}
export interface MutationToChangePasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToChangePasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAuditUserArgs {
  userId: string
  action: string
  reason: string
  comment?: string
}
export interface MutationToAuditUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToAuditUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResendSMSInviteArgs {
  userId: string
}
export interface MutationToResendSMSInviteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToResendSMSInviteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDummyTypeResolver<TParent = any> {
  dummy?: DummyToDummyResolver<TParent>
}

export interface DummyToDummyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLNotificationTypeResolver<TParent = any> {
  id?: NotificationToIdResolver<TParent>
  child?: NotificationToChildResolver<TParent>
  mother?: NotificationToMotherResolver<TParent>
  father?: NotificationToFatherResolver<TParent>
  informant?: NotificationToInformantResolver<TParent>
  location?: NotificationToLocationResolver<TParent>
  createdAt?: NotificationToCreatedAtResolver<TParent>
  updatedAt?: NotificationToUpdatedAtResolver<TParent>
}

export interface NotificationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToChildResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToMotherResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToFatherResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToInformantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthRegistrationTypeResolver<TParent = any> {
  id?: BirthRegistrationToIdResolver<TParent>
  _fhirIDMap?: BirthRegistrationTo_fhirIDMapResolver<TParent>
  registration?: BirthRegistrationToRegistrationResolver<TParent>
  child?: BirthRegistrationToChildResolver<TParent>
  mother?: BirthRegistrationToMotherResolver<TParent>
  father?: BirthRegistrationToFatherResolver<TParent>
  informant?: BirthRegistrationToInformantResolver<TParent>
  eventLocation?: BirthRegistrationToEventLocationResolver<TParent>
  vaccination?: BirthRegistrationToVaccinationResolver<TParent>
  birthType?: BirthRegistrationToBirthTypeResolver<TParent>
  weightAtBirth?: BirthRegistrationToWeightAtBirthResolver<TParent>
  heightAtBirth?: BirthRegistrationToHeightAtBirthResolver<TParent>
  attendantAtBirth?: BirthRegistrationToAttendantAtBirthResolver<TParent>
  otherAttendantAtBirth?: BirthRegistrationToOtherAttendantAtBirthResolver<
    TParent
  >
  birthRegistrationType?: BirthRegistrationToBirthRegistrationTypeResolver<
    TParent
  >
  presentAtBirthRegistration?: BirthRegistrationToPresentAtBirthRegistrationResolver<
    TParent
  >
  otherPresentAtBirthRegistration?: BirthRegistrationToOtherPresentAtBirthRegistrationResolver<
    TParent
  >
  childrenBornAliveToMother?: BirthRegistrationToChildrenBornAliveToMotherResolver<
    TParent
  >
  foetalDeathsToMother?: BirthRegistrationToFoetalDeathsToMotherResolver<
    TParent
  >
  lastPreviousLiveBirth?: BirthRegistrationToLastPreviousLiveBirthResolver<
    TParent
  >
  primaryCaregiver?: BirthRegistrationToPrimaryCaregiverResolver<TParent>
  createdAt?: BirthRegistrationToCreatedAtResolver<TParent>
  updatedAt?: BirthRegistrationToUpdatedAtResolver<TParent>
}

export interface BirthRegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToChildResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToFatherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToVaccinationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToBirthTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToWeightAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToHeightAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToOtherAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToBirthRegistrationTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToPresentAtBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToOtherPresentAtBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToChildrenBornAliveToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToFoetalDeathsToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToLastPreviousLiveBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToPrimaryCaregiverResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathRegistrationTypeResolver<TParent = any> {
  id?: DeathRegistrationToIdResolver<TParent>
  _fhirIDMap?: DeathRegistrationTo_fhirIDMapResolver<TParent>
  registration?: DeathRegistrationToRegistrationResolver<TParent>
  deceased?: DeathRegistrationToDeceasedResolver<TParent>
  informant?: DeathRegistrationToInformantResolver<TParent>
  mother?: DeathRegistrationToMotherResolver<TParent>
  father?: DeathRegistrationToFatherResolver<TParent>
  spouse?: DeathRegistrationToSpouseResolver<TParent>
  eventLocation?: DeathRegistrationToEventLocationResolver<TParent>
  mannerOfDeath?: DeathRegistrationToMannerOfDeathResolver<TParent>
  causeOfDeathMethod?: DeathRegistrationToCauseOfDeathMethodResolver<TParent>
  causeOfDeath?: DeathRegistrationToCauseOfDeathResolver<TParent>
  createdAt?: DeathRegistrationToCreatedAtResolver<TParent>
  updatedAt?: DeathRegistrationToUpdatedAtResolver<TParent>
}

export interface DeathRegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToFatherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToSpouseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToMannerOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCauseOfDeathMethodResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCauseOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPersonTypeResolver<TParent = any> {
  id?: PersonToIdResolver<TParent>
  _fhirID?: PersonTo_fhirIDResolver<TParent>
  identifier?: PersonToIdentifierResolver<TParent>
  name?: PersonToNameResolver<TParent>
  telecom?: PersonToTelecomResolver<TParent>
  gender?: PersonToGenderResolver<TParent>
  birthDate?: PersonToBirthDateResolver<TParent>
  maritalStatus?: PersonToMaritalStatusResolver<TParent>
  occupation?: PersonToOccupationResolver<TParent>
  dateOfMarriage?: PersonToDateOfMarriageResolver<TParent>
  multipleBirth?: PersonToMultipleBirthResolver<TParent>
  address?: PersonToAddressResolver<TParent>
  photo?: PersonToPhotoResolver<TParent>
  deceased?: PersonToDeceasedResolver<TParent>
  nationality?: PersonToNationalityResolver<TParent>
  educationalAttainment?: PersonToEducationalAttainmentResolver<TParent>
}

export interface PersonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToTelecomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToBirthDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToMaritalStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToOccupationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToDateOfMarriageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToMultipleBirthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToDeceasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToNationalityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToEducationalAttainmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthRegResultSetTypeResolver<TParent = any> {
  results?: BirthRegResultSetToResultsResolver<TParent>
  totalItems?: BirthRegResultSetToTotalItemsResolver<TParent>
}

export interface BirthRegResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventRegistrationTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | 'BirthRegistration'
    | 'DeathRegistration'
    | Promise<'BirthRegistration' | 'DeathRegistration'>
}
export interface GQLRegistrationCountResultTypeResolver<TParent = any> {
  results?: RegistrationCountResultToResultsResolver<TParent>
  total?: RegistrationCountResultToTotalResolver<TParent>
}

export interface RegistrationCountResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationCountResultToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocationTypeResolver<TParent = any> {
  id?: LocationToIdResolver<TParent>
  _fhirID?: LocationTo_fhirIDResolver<TParent>
  identifier?: LocationToIdentifierResolver<TParent>
  status?: LocationToStatusResolver<TParent>
  name?: LocationToNameResolver<TParent>
  alias?: LocationToAliasResolver<TParent>
  description?: LocationToDescriptionResolver<TParent>
  partOf?: LocationToPartOfResolver<TParent>
  type?: LocationToTypeResolver<TParent>
  telecom?: LocationToTelecomResolver<TParent>
  address?: LocationToAddressResolver<TParent>
  longitude?: LocationToLongitudeResolver<TParent>
  latitude?: LocationToLatitudeResolver<TParent>
  altitude?: LocationToAltitudeResolver<TParent>
  geoData?: LocationToGeoDataResolver<TParent>
}

export interface LocationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAliasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToPartOfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToTelecomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAltitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToGeoDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>
  userMgntUserID?: UserToUserMgntUserIDResolver<TParent>
  practitionerId?: UserToPractitionerIdResolver<TParent>
  name?: UserToNameResolver<TParent>
  username?: UserToUsernameResolver<TParent>
  mobile?: UserToMobileResolver<TParent>
  role?: UserToRoleResolver<TParent>
  type?: UserToTypeResolver<TParent>
  email?: UserToEmailResolver<TParent>
  status?: UserToStatusResolver<TParent>
  underInvestigation?: UserToUnderInvestigationResolver<TParent>
  primaryOffice?: UserToPrimaryOfficeResolver<TParent>
  catchmentArea?: UserToCatchmentAreaResolver<TParent>
  localRegistrar?: UserToLocalRegistrarResolver<TParent>
  identifier?: UserToIdentifierResolver<TParent>
  signature?: UserToSignatureResolver<TParent>
  creationDate?: UserToCreationDateResolver<TParent>
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUserMgntUserIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToPractitionerIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToMobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUnderInvestigationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToPrimaryOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToCatchmentAreaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToLocalRegistrarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToCreationDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchUserResultTypeResolver<TParent = any> {
  results?: SearchUserResultToResultsResolver<TParent>
  totalItems?: SearchUserResultToTotalItemsResolver<TParent>
}

export interface SearchUserResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchUserResultToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchFieldAgentResultTypeResolver<TParent = any> {
  results?: SearchFieldAgentResultToResultsResolver<TParent>
  totalItems?: SearchFieldAgentResultToTotalItemsResolver<TParent>
}

export interface SearchFieldAgentResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResultToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLVerifyPasswordResultTypeResolver<TParent = any> {
  mobile?: VerifyPasswordResultToMobileResolver<TParent>
  scrope?: VerifyPasswordResultToScropeResolver<TParent>
  status?: VerifyPasswordResultToStatusResolver<TParent>
  username?: VerifyPasswordResultToUsernameResolver<TParent>
  id?: VerifyPasswordResultToIdResolver<TParent>
}

export interface VerifyPasswordResultToMobileResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToScropeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToUsernameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationMetricsTypeResolver<TParent = any> {
  genderBasisMetrics?: RegistrationMetricsToGenderBasisMetricsResolver<TParent>
  timeFrames?: RegistrationMetricsToTimeFramesResolver<TParent>
  estimated45DayMetrics?: RegistrationMetricsToEstimated45DayMetricsResolver<
    TParent
  >
  payments?: RegistrationMetricsToPaymentsResolver<TParent>
}

export interface RegistrationMetricsToGenderBasisMetricsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationMetricsToTimeFramesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationMetricsToEstimated45DayMetricsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationMetricsToPaymentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventEstimationMetricsTypeResolver<TParent = any> {
  birth45DayMetrics?: EventEstimationMetricsToBirth45DayMetricsResolver<TParent>
  death45DayMetrics?: EventEstimationMetricsToDeath45DayMetricsResolver<TParent>
}

export interface EventEstimationMetricsToBirth45DayMetricsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventEstimationMetricsToDeath45DayMetricsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLApplicationsStartedMetricsTypeResolver<TParent = any> {
  fieldAgentApplications?: ApplicationsStartedMetricsToFieldAgentApplicationsResolver<
    TParent
  >
  hospitalApplications?: ApplicationsStartedMetricsToHospitalApplicationsResolver<
    TParent
  >
  officeApplications?: ApplicationsStartedMetricsToOfficeApplicationsResolver<
    TParent
  >
}

export interface ApplicationsStartedMetricsToFieldAgentApplicationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationsStartedMetricsToHospitalApplicationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationsStartedMetricsToOfficeApplicationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMonthWiseEstimationMetricsTypeResolver<TParent = any> {
  details?: MonthWiseEstimationMetricsToDetailsResolver<TParent>
  total?: MonthWiseEstimationMetricsToTotalResolver<TParent>
}

export interface MonthWiseEstimationMetricsToDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWiseEstimationMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocationWiseEstimationMetricsTypeResolver<TParent = any> {
  details?: LocationWiseEstimationMetricsToDetailsResolver<TParent>
  total?: LocationWiseEstimationMetricsToTotalResolver<TParent>
}

export interface LocationWiseEstimationMetricsToDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWiseEstimationMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTimeLoggedMetricsResultSetTypeResolver<TParent = any> {
  results?: TimeLoggedMetricsResultSetToResultsResolver<TParent>
  totalItems?: TimeLoggedMetricsResultSetToTotalItemsResolver<TParent>
}

export interface TimeLoggedMetricsResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventSearchResultSetTypeResolver<TParent = any> {
  results?: EventSearchResultSetToResultsResolver<TParent>
  totalItems?: EventSearchResultSetToTotalItemsResolver<TParent>
}

export interface EventSearchResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventSearchResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventProgressResultSetTypeResolver<TParent = any> {
  results?: EventProgressResultSetToResultsResolver<TParent>
  totalItems?: EventProgressResultSetToTotalItemsResolver<TParent>
}

export interface EventProgressResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRoleTypeResolver<TParent = any> {
  id?: RoleToIdResolver<TParent>
  title?: RoleToTitleResolver<TParent>
  value?: RoleToValueResolver<TParent>
  types?: RoleToTypesResolver<TParent>
  active?: RoleToActiveResolver<TParent>
}

export interface RoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCreatedIdsTypeResolver<TParent = any> {
  compositionId?: CreatedIdsToCompositionIdResolver<TParent>
  trackingId?: CreatedIdsToTrackingIdResolver<TParent>
  registrationNumber?: CreatedIdsToRegistrationNumberResolver<TParent>
}

export interface CreatedIdsToCompositionIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CreatedIdsToTrackingIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CreatedIdsToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationTypeResolver<TParent = any> {
  id?: RegistrationToIdResolver<TParent>
  _fhirID?: RegistrationTo_fhirIDResolver<TParent>
  draftId?: RegistrationToDraftIdResolver<TParent>
  trackingId?: RegistrationToTrackingIdResolver<TParent>
  registrationNumber?: RegistrationToRegistrationNumberResolver<TParent>
  paperFormID?: RegistrationToPaperFormIDResolver<TParent>
  page?: RegistrationToPageResolver<TParent>
  book?: RegistrationToBookResolver<TParent>
  contact?: RegistrationToContactResolver<TParent>
  contactRelationship?: RegistrationToContactRelationshipResolver<TParent>
  contactPhoneNumber?: RegistrationToContactPhoneNumberResolver<TParent>
  status?: RegistrationToStatusResolver<TParent>
  type?: RegistrationToTypeResolver<TParent>
  inCompleteFields?: RegistrationToInCompleteFieldsResolver<TParent>
  attachments?: RegistrationToAttachmentsResolver<TParent>
  certificates?: RegistrationToCertificatesResolver<TParent>
  duplicates?: RegistrationToDuplicatesResolver<TParent>
}

export interface RegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToDraftIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToPaperFormIDResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToBookResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactPhoneNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToInCompleteFieldsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToAttachmentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToCertificatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRelatedPersonTypeResolver<TParent = any> {
  id?: RelatedPersonToIdResolver<TParent>
  _fhirID?: RelatedPersonTo_fhirIDResolver<TParent>
  relationship?: RelatedPersonToRelationshipResolver<TParent>
  otherRelationship?: RelatedPersonToOtherRelationshipResolver<TParent>
  affidavit?: RelatedPersonToAffidavitResolver<TParent>
  individual?: RelatedPersonToIndividualResolver<TParent>
}

export interface RelatedPersonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToOtherRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToAffidavitResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToIndividualResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLVaccinationTypeResolver<TParent = any> {
  _fhirID?: VaccinationTo_fhirIDResolver<TParent>
  manufacturer?: VaccinationToManufacturerResolver<TParent>
  priorityGroup?: VaccinationToPriorityGroupResolver<TParent>
  batchNumber?: VaccinationToBatchNumberResolver<TParent>
  notes?: VaccinationToNotesResolver<TParent>
  doseGiven1?: VaccinationToDoseGiven1Resolver<TParent>
}

export interface VaccinationTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VaccinationToManufacturerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VaccinationToPriorityGroupResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VaccinationToBatchNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VaccinationToNotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VaccinationToDoseGiven1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPrimaryCaregiverTypeResolver<TParent = any> {
  primaryCaregiver?: PrimaryCaregiverToPrimaryCaregiverResolver<TParent>
  reasonsNotApplying?: PrimaryCaregiverToReasonsNotApplyingResolver<TParent>
  parentDetailsType?: PrimaryCaregiverToParentDetailsTypeResolver<TParent>
}

export interface PrimaryCaregiverToPrimaryCaregiverResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PrimaryCaregiverToReasonsNotApplyingResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PrimaryCaregiverToParentDetailsTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLIdentityTypeTypeResolver<TParent = any> {
  id?: IdentityTypeToIdResolver<TParent>
  type?: IdentityTypeToTypeResolver<TParent>
  otherType?: IdentityTypeToOtherTypeResolver<TParent>
}

export interface IdentityTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentityTypeToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentityTypeToOtherTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLHumanNameTypeResolver<TParent = any> {
  use?: HumanNameToUseResolver<TParent>
  firstNames?: HumanNameToFirstNamesResolver<TParent>
  familyName?: HumanNameToFamilyNameResolver<TParent>
  baptismalName?: HumanNameToBaptismalNameResolver<TParent>
}

export interface HumanNameToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HumanNameToFirstNamesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HumanNameToFamilyNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HumanNameToBaptismalNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLContactPointTypeResolver<TParent = any> {
  system?: ContactPointToSystemResolver<TParent>
  value?: ContactPointToValueResolver<TParent>
  use?: ContactPointToUseResolver<TParent>
}

export interface ContactPointToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ContactPointToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ContactPointToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAddressTypeResolver<TParent = any> {
  use?: AddressToUseResolver<TParent>
  type?: AddressToTypeResolver<TParent>
  text?: AddressToTextResolver<TParent>
  line?: AddressToLineResolver<TParent>
  lineName?: AddressToLineNameResolver<TParent>
  city?: AddressToCityResolver<TParent>
  district?: AddressToDistrictResolver<TParent>
  districtName?: AddressToDistrictNameResolver<TParent>
  state?: AddressToStateResolver<TParent>
  stateName?: AddressToStateNameResolver<TParent>
  postalCode?: AddressToPostalCodeResolver<TParent>
  country?: AddressToCountryResolver<TParent>
  from?: AddressToFromResolver<TParent>
  to?: AddressToToResolver<TParent>
}

export interface AddressToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToLineNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToDistrictResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToDistrictNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToStateNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToPostalCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAttachmentTypeResolver<TParent = any> {
  id?: AttachmentToIdResolver<TParent>
  _fhirID?: AttachmentTo_fhirIDResolver<TParent>
  contentType?: AttachmentToContentTypeResolver<TParent>
  data?: AttachmentToDataResolver<TParent>
  status?: AttachmentToStatusResolver<TParent>
  originalFileName?: AttachmentToOriginalFileNameResolver<TParent>
  systemFileName?: AttachmentToSystemFileNameResolver<TParent>
  type?: AttachmentToTypeResolver<TParent>
  description?: AttachmentToDescriptionResolver<TParent>
  subject?: AttachmentToSubjectResolver<TParent>
  createdAt?: AttachmentToCreatedAtResolver<TParent>
}

export interface AttachmentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToContentTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToOriginalFileNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToSystemFileNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeceasedTypeResolver<TParent = any> {
  deceased?: DeceasedToDeceasedResolver<TParent>
  deathDate?: DeceasedToDeathDateResolver<TParent>
}

export interface DeceasedToDeceasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeceasedToDeathDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLStatusWiseRegistrationCountTypeResolver<TParent = any> {
  status?: StatusWiseRegistrationCountToStatusResolver<TParent>
  count?: StatusWiseRegistrationCountToCountResolver<TParent>
}

export interface StatusWiseRegistrationCountToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface StatusWiseRegistrationCountToCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLIdentifierTypeResolver<TParent = any> {
  system?: IdentifierToSystemResolver<TParent>
  value?: IdentifierToValueResolver<TParent>
}

export interface IdentifierToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentifierToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocalRegistrarTypeResolver<TParent = any> {
  name?: LocalRegistrarToNameResolver<TParent>
  role?: LocalRegistrarToRoleResolver<TParent>
  signature?: LocalRegistrarToSignatureResolver<TParent>
}

export interface LocalRegistrarToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocalRegistrarToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocalRegistrarToSignatureResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSignatureTypeResolver<TParent = any> {
  data?: SignatureToDataResolver<TParent>
  type?: SignatureToTypeResolver<TParent>
}

export interface SignatureToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SignatureToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchFieldAgentResponseTypeResolver<TParent = any> {
  practitionerId?: SearchFieldAgentResponseToPractitionerIdResolver<TParent>
  fullName?: SearchFieldAgentResponseToFullNameResolver<TParent>
  type?: SearchFieldAgentResponseToTypeResolver<TParent>
  status?: SearchFieldAgentResponseToStatusResolver<TParent>
  primaryOfficeId?: SearchFieldAgentResponseToPrimaryOfficeIdResolver<TParent>
  creationDate?: SearchFieldAgentResponseToCreationDateResolver<TParent>
  totalNumberOfApplicationStarted?: SearchFieldAgentResponseToTotalNumberOfApplicationStartedResolver<
    TParent
  >
  totalNumberOfInProgressAppStarted?: SearchFieldAgentResponseToTotalNumberOfInProgressAppStartedResolver<
    TParent
  >
  totalNumberOfRejectedApplications?: SearchFieldAgentResponseToTotalNumberOfRejectedApplicationsResolver<
    TParent
  >
  averageTimeForDeclaredApplications?: SearchFieldAgentResponseToAverageTimeForDeclaredApplicationsResolver<
    TParent
  >
}

export interface SearchFieldAgentResponseToPractitionerIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToFullNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToPrimaryOfficeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToCreationDateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfApplicationStartedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfInProgressAppStartedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfRejectedApplicationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToAverageTimeForDeclaredApplicationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationGenderBasisMetricsTypeResolver<TParent = any> {
  details?: RegistrationGenderBasisMetricsToDetailsResolver<TParent>
  total?: RegistrationGenderBasisMetricsToTotalResolver<TParent>
}

export interface RegistrationGenderBasisMetricsToDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationGenderBasisMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationTimeFrameMetricsTypeResolver<TParent = any> {
  details?: RegistrationTimeFrameMetricsToDetailsResolver<TParent>
  total?: RegistrationTimeFrameMetricsToTotalResolver<TParent>
}

export interface RegistrationTimeFrameMetricsToDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationTimeFrameMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistration45DayEstimatedMetricsTypeResolver<
  TParent = any
> {
  details?: Registration45DayEstimatedMetricsToDetailsResolver<TParent>
  total?: Registration45DayEstimatedMetricsToTotalResolver<TParent>
}

export interface Registration45DayEstimatedMetricsToDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Registration45DayEstimatedMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificationPaymentMetricsTypeResolver<TParent = any> {
  details?: CertificationPaymentMetricsToDetailsResolver<TParent>
  total?: CertificationPaymentMetricsToTotalResolver<TParent>
}

export interface CertificationPaymentMetricsToDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificationPaymentMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEstimationMetricsTypeResolver<TParent = any> {
  actualRegistration?: EstimationMetricsToActualRegistrationResolver<TParent>
  estimatedRegistration?: EstimationMetricsToEstimatedRegistrationResolver<
    TParent
  >
  estimatedPercentage?: EstimationMetricsToEstimatedPercentageResolver<TParent>
  malePercentage?: EstimationMetricsToMalePercentageResolver<TParent>
  femalePercentage?: EstimationMetricsToFemalePercentageResolver<TParent>
}

export interface EstimationMetricsToActualRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationMetricsToEstimatedRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationMetricsToEstimatedPercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationMetricsToMalePercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationMetricsToFemalePercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMonthWise45DayEstimationTypeResolver<TParent = any> {
  actualTotalRegistration?: MonthWise45DayEstimationToActualTotalRegistrationResolver<
    TParent
  >
  actual45DayRegistration?: MonthWise45DayEstimationToActual45DayRegistrationResolver<
    TParent
  >
  estimatedRegistration?: MonthWise45DayEstimationToEstimatedRegistrationResolver<
    TParent
  >
  estimated45DayPercentage?: MonthWise45DayEstimationToEstimated45DayPercentageResolver<
    TParent
  >
  month?: MonthWise45DayEstimationToMonthResolver<TParent>
  year?: MonthWise45DayEstimationToYearResolver<TParent>
  startOfMonth?: MonthWise45DayEstimationToStartOfMonthResolver<TParent>
  endOfMonth?: MonthWise45DayEstimationToEndOfMonthResolver<TParent>
}

export interface MonthWise45DayEstimationToActualTotalRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWise45DayEstimationToActual45DayRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWise45DayEstimationToEstimatedRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWise45DayEstimationToEstimated45DayPercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWise45DayEstimationToMonthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWise45DayEstimationToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWise45DayEstimationToStartOfMonthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWise45DayEstimationToEndOfMonthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventIn45DayEstimationCountTypeResolver<TParent = any> {
  actualTotalRegistration?: EventIn45DayEstimationCountToActualTotalRegistrationResolver<
    TParent
  >
  actual45DayRegistration?: EventIn45DayEstimationCountToActual45DayRegistrationResolver<
    TParent
  >
  estimatedRegistration?: EventIn45DayEstimationCountToEstimatedRegistrationResolver<
    TParent
  >
  estimated45DayPercentage?: EventIn45DayEstimationCountToEstimated45DayPercentageResolver<
    TParent
  >
}

export interface EventIn45DayEstimationCountToActualTotalRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventIn45DayEstimationCountToActual45DayRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventIn45DayEstimationCountToEstimatedRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventIn45DayEstimationCountToEstimated45DayPercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocationWise45DayEstimationTypeResolver<TParent = any> {
  actualTotalRegistration?: LocationWise45DayEstimationToActualTotalRegistrationResolver<
    TParent
  >
  actual45DayRegistration?: LocationWise45DayEstimationToActual45DayRegistrationResolver<
    TParent
  >
  estimatedRegistration?: LocationWise45DayEstimationToEstimatedRegistrationResolver<
    TParent
  >
  estimated45DayPercentage?: LocationWise45DayEstimationToEstimated45DayPercentageResolver<
    TParent
  >
  locationId?: LocationWise45DayEstimationToLocationIdResolver<TParent>
  locationName?: LocationWise45DayEstimationToLocationNameResolver<TParent>
}

export interface LocationWise45DayEstimationToActualTotalRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWise45DayEstimationToActual45DayRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWise45DayEstimationToEstimatedRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWise45DayEstimationToEstimated45DayPercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWise45DayEstimationToLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWise45DayEstimationToLocationNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTimeLoggedMetricsTypeResolver<TParent = any> {
  status?: TimeLoggedMetricsToStatusResolver<TParent>
  trackingId?: TimeLoggedMetricsToTrackingIdResolver<TParent>
  eventType?: TimeLoggedMetricsToEventTypeResolver<TParent>
  time?: TimeLoggedMetricsToTimeResolver<TParent>
}

export interface TimeLoggedMetricsToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsToEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventSearchSetTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | 'BirthEventSearchSet'
    | 'DeathEventSearchSet'
    | Promise<'BirthEventSearchSet' | 'DeathEventSearchSet'>
}
export interface GQLEventProgressSetTypeResolver<TParent = any> {
  id?: EventProgressSetToIdResolver<TParent>
  type?: EventProgressSetToTypeResolver<TParent>
  name?: EventProgressSetToNameResolver<TParent>
  dateOfEvent?: EventProgressSetToDateOfEventResolver<TParent>
  registration?: EventProgressSetToRegistrationResolver<TParent>
  startedBy?: EventProgressSetToStartedByResolver<TParent>
  startedByFacility?: EventProgressSetToStartedByFacilityResolver<TParent>
  startedAt?: EventProgressSetToStartedAtResolver<TParent>
  progressReport?: EventProgressSetToProgressReportResolver<TParent>
}

export interface EventProgressSetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToDateOfEventResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToStartedByResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToStartedByFacilityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToStartedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToProgressReportResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegWorkflowTypeResolver<TParent = any> {
  id?: RegWorkflowToIdResolver<TParent>
  type?: RegWorkflowToTypeResolver<TParent>
  user?: RegWorkflowToUserResolver<TParent>
  timestamp?: RegWorkflowToTimestampResolver<TParent>
  comments?: RegWorkflowToCommentsResolver<TParent>
  location?: RegWorkflowToLocationResolver<TParent>
  office?: RegWorkflowToOfficeResolver<TParent>
  timeLogged?: RegWorkflowToTimeLoggedResolver<TParent>
}

export interface RegWorkflowToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTimeLoggedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificateTypeResolver<TParent = any> {
  collector?: CertificateToCollectorResolver<TParent>
  hasShowedVerifiedDocument?: CertificateToHasShowedVerifiedDocumentResolver<
    TParent
  >
  payments?: CertificateToPaymentsResolver<TParent>
  data?: CertificateToDataResolver<TParent>
}

export interface CertificateToCollectorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToHasShowedVerifiedDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToPaymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLReasonsNotApplyingTypeResolver<TParent = any> {
  primaryCaregiverType?: ReasonsNotApplyingToPrimaryCaregiverTypeResolver<
    TParent
  >
  reasonNotApplying?: ReasonsNotApplyingToReasonNotApplyingResolver<TParent>
  isDeceased?: ReasonsNotApplyingToIsDeceasedResolver<TParent>
}

export interface ReasonsNotApplyingToPrimaryCaregiverTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReasonsNotApplyingToReasonNotApplyingResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReasonsNotApplyingToIsDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLGenderBasisDetailsMetricsTypeResolver<TParent = any> {
  location?: GenderBasisDetailsMetricsToLocationResolver<TParent>
  maleUnder18?: GenderBasisDetailsMetricsToMaleUnder18Resolver<TParent>
  femaleUnder18?: GenderBasisDetailsMetricsToFemaleUnder18Resolver<TParent>
  maleOver18?: GenderBasisDetailsMetricsToMaleOver18Resolver<TParent>
  femaleOver18?: GenderBasisDetailsMetricsToFemaleOver18Resolver<TParent>
  total?: GenderBasisDetailsMetricsToTotalResolver<TParent>
}

export interface GenderBasisDetailsMetricsToLocationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisDetailsMetricsToMaleUnder18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisDetailsMetricsToFemaleUnder18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisDetailsMetricsToMaleOver18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisDetailsMetricsToFemaleOver18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisDetailsMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLGenderBasisTotalCountTypeResolver<TParent = any> {
  maleUnder18?: GenderBasisTotalCountToMaleUnder18Resolver<TParent>
  femaleUnder18?: GenderBasisTotalCountToFemaleUnder18Resolver<TParent>
  maleOver18?: GenderBasisTotalCountToMaleOver18Resolver<TParent>
  femaleOver18?: GenderBasisTotalCountToFemaleOver18Resolver<TParent>
  total?: GenderBasisTotalCountToTotalResolver<TParent>
}

export interface GenderBasisTotalCountToMaleUnder18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisTotalCountToFemaleUnder18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisTotalCountToMaleOver18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisTotalCountToFemaleOver18Resolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GenderBasisTotalCountToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTimeFrameDetailMetricsTypeResolver<TParent = any> {
  locationId?: TimeFrameDetailMetricsToLocationIdResolver<TParent>
  regWithin45d?: TimeFrameDetailMetricsToRegWithin45dResolver<TParent>
  regWithin45dTo1yr?: TimeFrameDetailMetricsToRegWithin45dTo1yrResolver<TParent>
  regWithin1yrTo5yr?: TimeFrameDetailMetricsToRegWithin1yrTo5yrResolver<TParent>
  regOver5yr?: TimeFrameDetailMetricsToRegOver5yrResolver<TParent>
  total?: TimeFrameDetailMetricsToTotalResolver<TParent>
}

export interface TimeFrameDetailMetricsToLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameDetailMetricsToRegWithin45dResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameDetailMetricsToRegWithin45dTo1yrResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameDetailMetricsToRegWithin1yrTo5yrResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameDetailMetricsToRegOver5yrResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameDetailMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTimeFrameTotalCountTypeResolver<TParent = any> {
  regWithin45d?: TimeFrameTotalCountToRegWithin45dResolver<TParent>
  regWithin45dTo1yr?: TimeFrameTotalCountToRegWithin45dTo1yrResolver<TParent>
  regWithin1yrTo5yr?: TimeFrameTotalCountToRegWithin1yrTo5yrResolver<TParent>
  regOver5yr?: TimeFrameTotalCountToRegOver5yrResolver<TParent>
  total?: TimeFrameTotalCountToTotalResolver<TParent>
}

export interface TimeFrameTotalCountToRegWithin45dResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameTotalCountToRegWithin45dTo1yrResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameTotalCountToRegWithin1yrTo5yrResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameTotalCountToRegOver5yrResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeFrameTotalCountToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEstimated45DayMetricsTypeResolver<TParent = any> {
  locationId?: Estimated45DayMetricsToLocationIdResolver<TParent>
  estimatedRegistration?: Estimated45DayMetricsToEstimatedRegistrationResolver<
    TParent
  >
  registrationIn45Day?: Estimated45DayMetricsToRegistrationIn45DayResolver<
    TParent
  >
  estimationYear?: Estimated45DayMetricsToEstimationYearResolver<TParent>
  estimationLocationLevel?: Estimated45DayMetricsToEstimationLocationLevelResolver<
    TParent
  >
  estimationPercentage?: Estimated45DayMetricsToEstimationPercentageResolver<
    TParent
  >
}

export interface Estimated45DayMetricsToLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Estimated45DayMetricsToEstimatedRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Estimated45DayMetricsToRegistrationIn45DayResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Estimated45DayMetricsToEstimationYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Estimated45DayMetricsToEstimationLocationLevelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Estimated45DayMetricsToEstimationPercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEstimate45DayTotalCountTypeResolver<TParent = any> {
  estimatedRegistration?: Estimate45DayTotalCountToEstimatedRegistrationResolver<
    TParent
  >
  registrationIn45Day?: Estimate45DayTotalCountToRegistrationIn45DayResolver<
    TParent
  >
  estimationPercentage?: Estimate45DayTotalCountToEstimationPercentageResolver<
    TParent
  >
}

export interface Estimate45DayTotalCountToEstimatedRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Estimate45DayTotalCountToRegistrationIn45DayResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface Estimate45DayTotalCountToEstimationPercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificationPaymentDetailsMetricsTypeResolver<
  TParent = any
> {
  total?: CertificationPaymentDetailsMetricsToTotalResolver<TParent>
  locationId?: CertificationPaymentDetailsMetricsToLocationIdResolver<TParent>
}

export interface CertificationPaymentDetailsMetricsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificationPaymentDetailsMetricsToLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificationPaymentTotalCountTypeResolver<TParent = any> {
  total?: CertificationPaymentTotalCountToTotalResolver<TParent>
}

export interface CertificationPaymentTotalCountToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationSearchSetTypeResolver<TParent = any> {
  status?: RegistrationSearchSetToStatusResolver<TParent>
  contactNumber?: RegistrationSearchSetToContactNumberResolver<TParent>
  contactRelationship?: RegistrationSearchSetToContactRelationshipResolver<
    TParent
  >
  dateOfApplication?: RegistrationSearchSetToDateOfApplicationResolver<TParent>
  trackingId?: RegistrationSearchSetToTrackingIdResolver<TParent>
  registrationNumber?: RegistrationSearchSetToRegistrationNumberResolver<
    TParent
  >
  eventLocationId?: RegistrationSearchSetToEventLocationIdResolver<TParent>
  registeredLocationId?: RegistrationSearchSetToRegisteredLocationIdResolver<
    TParent
  >
  reason?: RegistrationSearchSetToReasonResolver<TParent>
  comment?: RegistrationSearchSetToCommentResolver<TParent>
  duplicates?: RegistrationSearchSetToDuplicatesResolver<TParent>
  createdAt?: RegistrationSearchSetToCreatedAtResolver<TParent>
  modifiedAt?: RegistrationSearchSetToModifiedAtResolver<TParent>
}

export interface RegistrationSearchSetToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToContactNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToContactRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToDateOfApplicationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToEventLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToRegisteredLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToReasonResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToCommentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToModifiedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLOperationHistorySearchSetTypeResolver<TParent = any> {
  operationType?: OperationHistorySearchSetToOperationTypeResolver<TParent>
  operatedOn?: OperationHistorySearchSetToOperatedOnResolver<TParent>
  operatorRole?: OperationHistorySearchSetToOperatorRoleResolver<TParent>
  operatorName?: OperationHistorySearchSetToOperatorNameResolver<TParent>
  operatorOfficeName?: OperationHistorySearchSetToOperatorOfficeNameResolver<
    TParent
  >
  operatorOfficeAlias?: OperationHistorySearchSetToOperatorOfficeAliasResolver<
    TParent
  >
  notificationFacilityName?: OperationHistorySearchSetToNotificationFacilityNameResolver<
    TParent
  >
  notificationFacilityAlias?: OperationHistorySearchSetToNotificationFacilityAliasResolver<
    TParent
  >
  rejectReason?: OperationHistorySearchSetToRejectReasonResolver<TParent>
  rejectComment?: OperationHistorySearchSetToRejectCommentResolver<TParent>
}

export interface OperationHistorySearchSetToOperationTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatedOnResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorRoleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorOfficeNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorOfficeAliasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToNotificationFacilityNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToNotificationFacilityAliasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToRejectReasonResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToRejectCommentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthEventSearchSetTypeResolver<TParent = any> {
  id?: BirthEventSearchSetToIdResolver<TParent>
  type?: BirthEventSearchSetToTypeResolver<TParent>
  childName?: BirthEventSearchSetToChildNameResolver<TParent>
  dateOfBirth?: BirthEventSearchSetToDateOfBirthResolver<TParent>
  registration?: BirthEventSearchSetToRegistrationResolver<TParent>
  operationHistories?: BirthEventSearchSetToOperationHistoriesResolver<TParent>
}

export interface BirthEventSearchSetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToChildNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToDateOfBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToOperationHistoriesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathEventSearchSetTypeResolver<TParent = any> {
  id?: DeathEventSearchSetToIdResolver<TParent>
  type?: DeathEventSearchSetToTypeResolver<TParent>
  deceasedName?: DeathEventSearchSetToDeceasedNameResolver<TParent>
  dateOfDeath?: DeathEventSearchSetToDateOfDeathResolver<TParent>
  registration?: DeathEventSearchSetToRegistrationResolver<TParent>
  operationHistories?: DeathEventSearchSetToOperationHistoriesResolver<TParent>
}

export interface DeathEventSearchSetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToDeceasedNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToDateOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToOperationHistoriesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventProgressDataTypeResolver<TParent = any> {
  timeInProgress?: EventProgressDataToTimeInProgressResolver<TParent>
  timeInReadyForReview?: EventProgressDataToTimeInReadyForReviewResolver<
    TParent
  >
  timeInRequiresUpdates?: EventProgressDataToTimeInRequiresUpdatesResolver<
    TParent
  >
  timeInWaitingForApproval?: EventProgressDataToTimeInWaitingForApprovalResolver<
    TParent
  >
  timeInWaitingForBRIS?: EventProgressDataToTimeInWaitingForBRISResolver<
    TParent
  >
  timeInReadyToPrint?: EventProgressDataToTimeInReadyToPrintResolver<TParent>
}

export interface EventProgressDataToTimeInProgressResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInReadyForReviewResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInRequiresUpdatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInWaitingForApprovalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInWaitingForBRISResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInReadyToPrintResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>
  user?: CommentToUserResolver<TParent>
  comment?: CommentToCommentResolver<TParent>
  createdAt?: CommentToCreatedAtResolver<TParent>
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPaymentTypeResolver<TParent = any> {
  paymentId?: PaymentToPaymentIdResolver<TParent>
  type?: PaymentToTypeResolver<TParent>
  total?: PaymentToTotalResolver<TParent>
  amount?: PaymentToAmountResolver<TParent>
  outcome?: PaymentToOutcomeResolver<TParent>
  date?: PaymentToDateResolver<TParent>
}

export interface PaymentToPaymentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToOutcomeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}
