type Query {
  listNotifications(locationIds: [String], status: String, userId: String, from: Date, to: Date): [Notification]
  fetchBirthRegistration(id: ID!): BirthRegistration
  searchBirthRegistrations(fromDate: Date, toDate: Date): [BirthRegistration]
  searchDeathRegistrations(fromDate: Date, toDate: Date): [DeathRegistration]
  queryRegistrationByIdentifier(identifier: ID!): BirthRegistration
  queryPersonByIdentifier(identifier: ID!): Person
  listBirthRegistrations(locationIds: [String], status: String, userId: String, from: Date, to: Date, count: Int, skip: Int): BirthRegResultSet
  fetchDeathRegistration(id: ID!): DeathRegistration
  fetchEventRegistration(id: ID!): EventRegistration
  fetchRegistration(id: ID!): EventRegistration
  queryPersonByNidIdentifier(dob: String, nid: String, country: String): Person
  fetchRegistrationCountByStatus(locationId: String!, status: [String]!): RegistrationCountResult
  locationsByParent(parentId: String, type: String): [Location]
  locationById(locationId: String): Location
  hasChildLocation(parentId: String): Location
  getUser(userId: String): User
  searchUsers(username: String, mobile: String, status: String, role: String, primaryOfficeId: String, locationId: String, count: Int, skip: Int, sort: String): SearchUserResult
  searchFieldAgents(locationId: String!, status: String, language: String, timeStart: String!, timeEnd: String!, event: String, count: Int, skip: Int, sort: String): SearchFieldAgentResult
  verifyPasswordById(id: String!, password: String!): VerifyPasswordResult
  fetchRegistrationMetrics(timeStart: String!, timeEnd: String!, locationId: String!, event: String!): RegistrationMetrics
  getEventEstimationMetrics(timeStart: String!, timeEnd: String!, locationId: String!): EventEstimationMetrics
  getApplicationsStartedMetrics(timeStart: String!, timeEnd: String!, locationId: String!): ApplicationsStartedMetrics
  fetchMonthWiseEventMetrics(timeStart: String!, timeEnd: String!, locationId: String!, event: String!): MonthWiseEstimationMetrics
  fetchLocationWiseEventMetrics(timeStart: String!, timeEnd: String!, locationId: String!, event: String!): LocationWiseEstimationMetrics
  fetchTimeLoggedMetricsByPractitioner(timeStart: String!, timeEnd: String!, practitionerId: String!, locationId: String!, count: Int!): TimeLoggedMetricsResultSet
  searchEvents(userId: String, locationIds: [String], status: [String], type: [String], trackingId: String, registrationNumber: String, contactNumber: String, name: String, count: Int, skip: Int, sort: String, sortColumn: String): EventSearchResultSet
  getEventsWithProgress(parentLocationId: String, count: Int, skip: Int, sort: String, status: [String], type: [String]): EventProgressResultSet
  getRoles(title: String, value: String, type: String, active: Boolean, sortBy: String, sortOrder: String): [Role]
}

type Mutation {
  createNotification(details: NotificationInput!): Notification!
  voidNotification(id: ID!): Notification
  createBirthRegistration(details: BirthRegistrationInput!): CreatedIds!
  updateBirthRegistration(id: ID!, details: BirthRegistrationInput!): ID!
  markBirthAsVerified(id: ID!, details: BirthRegistrationInput): BirthRegistration
  markBirthAsValidated(id: ID!, details: BirthRegistrationInput): ID
  markBirthAsRegistered(id: ID!, details: BirthRegistrationInput): BirthRegistration!
  markBirthAsCertified(id: ID!, details: BirthRegistrationInput!): ID!
  markEventAsVoided(id: String!, reason: String!, comment: String): ID!
  notADuplicate(id: String!, duplicateId: String!): ID!
  createDeathRegistration(details: DeathRegistrationInput!): CreatedIds!
  updateDeathRegistration(id: ID!, details: DeathRegistrationInput!): ID!
  markDeathAsVerified(id: ID!, details: DeathRegistrationInput): DeathRegistration
  markDeathAsValidated(id: ID!, details: DeathRegistrationInput): ID
  markDeathAsRegistered(id: ID!, details: DeathRegistrationInput): DeathRegistration!
  markDeathAsCertified(id: ID!, details: DeathRegistrationInput!): ID!
  createOrUpdateUser(user: UserInput!): User!
  activateUser(userId: String!, password: String!, securityQNAs: [SecurityQuestionAnswer]!): String
  changePassword(userId: String!, existingPassword: String!, password: String!): String
  auditUser(userId: String!, action: String!, reason: String!, comment: String): String
  resendSMSInvite(userId: String!): String
}

type Dummy {
  dummy: String!
}

type Notification {
  id: ID!
  child: Person
  mother: Person
  father: Person
  informant: Person
  location: Location
  createdAt: Date
  updatedAt: Date
}

scalar Date

type BirthRegistration implements EventRegistration {
  id: ID!
  _fhirIDMap: Map
  registration: Registration
  child: Person
  mother: Person
  father: Person
  informant: RelatedPerson
  eventLocation: Location
  vaccination: Vaccination
  birthType: BirthType
  weightAtBirth: Float
  heightAtBirth: Float
  attendantAtBirth: AttendantType
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  presentAtBirthRegistration: BirthRegPresence
  otherPresentAtBirthRegistration: String
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  primaryCaregiver: PrimaryCaregiver
  createdAt: Date
  updatedAt: Date
}

type DeathRegistration implements EventRegistration {
  id: ID!
  _fhirIDMap: Map
  registration: Registration
  deceased: Person
  informant: RelatedPerson
  mother: Person
  father: Person
  spouse: Person
  eventLocation: Location
  mannerOfDeath: MannerOfDeath
  causeOfDeathMethod: CauseOfDeathMethodType
  causeOfDeath: String
  createdAt: Date
  updatedAt: Date
}

type Person {
  id: ID
  _fhirID: ID
  identifier: [IdentityType]
  name: [HumanName]
  telecom: [ContactPoint]
  gender: String
  birthDate: String
  maritalStatus: MaritalStatusType
  occupation: String
  dateOfMarriage: Date
  multipleBirth: Int
  address: [Address]
  photo: [Attachment]
  deceased: Deceased
  nationality: [String]
  educationalAttainment: EducationType
}

type BirthRegResultSet {
  results: [BirthRegistration]
  totalItems: Int
}

interface EventRegistration {
  id: ID!
  registration: Registration
  createdAt: Date
}

type RegistrationCountResult {
  results: [StatusWiseRegistrationCount]!
  total: Int!
}

type Location {
  id: ID!
  _fhirID: ID
  identifier: [Identifier]
  status: String
  name: String
  alias: [String]
  description: String
  partOf: String
  type: LocationType
  telecom: [ContactPoint]
  address: Address
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
}

type User {
  id: ID
  userMgntUserID: ID
  practitionerId: String
  name: [HumanName]
  username: String
  mobile: String
  role: String
  type: String
  email: String
  status: String
  underInvestigation: Boolean
  primaryOffice: Location
  catchmentArea: [Location]
  localRegistrar: LocalRegistrar!
  identifier: Identifier
  signature: Signature
  creationDate: String
}

type SearchUserResult {
  results: [User]
  totalItems: Int
}

type SearchFieldAgentResult {
  results: [SearchFieldAgentResponse]
  totalItems: Int
}

type VerifyPasswordResult {
  mobile: String
  scrope: [String]
  status: String
  username: String
  id: String
}

type RegistrationMetrics {
  genderBasisMetrics: RegistrationGenderBasisMetrics
  timeFrames: RegistrationTimeFrameMetrics
  estimated45DayMetrics: Registration45DayEstimatedMetrics
  payments: CertificationPaymentMetrics
}

type EventEstimationMetrics {
  birth45DayMetrics: EstimationMetrics
  death45DayMetrics: EstimationMetrics
}

type ApplicationsStartedMetrics {
  fieldAgentApplications: Int!
  hospitalApplications: Int!
  officeApplications: Int!
}

type MonthWiseEstimationMetrics {
  details: [MonthWise45DayEstimation]
  total: EventIn45DayEstimationCount
}

type LocationWiseEstimationMetrics {
  details: [LocationWise45DayEstimation]
  total: EventIn45DayEstimationCount
}

type TimeLoggedMetricsResultSet {
  results: [TimeLoggedMetrics]
  totalItems: Int
}

type EventSearchResultSet {
  results: [EventSearchSet]
  totalItems: Int
}

type EventProgressResultSet {
  results: [EventProgressSet]
  totalItems: Int
}

type Role {
  id: ID!
  title: String
  value: String
  types: [String]
  active: Boolean
}

input NotificationInput {
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: PersonInput
  location: LocationInput
  createdAt: Date
  updatedAt: Date
}

type CreatedIds {
  compositionId: String
  trackingId: String
  registrationNumber: String
}

input BirthRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: RelatedPersonInput
  vaccination: VaccinationInput
  eventLocation: LocationInput
  birthType: BirthType
  weightAtBirth: Float
  heightAtBirth: Float
  attendantAtBirth: AttendantType
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  presentAtBirthRegistration: BirthRegPresence
  otherPresentAtBirthRegistration: String
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  primaryCaregiver: PrimaryCaregiverInput
  createdAt: Date
  updatedAt: Date
}

input DeathRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  deceased: PersonInput
  informant: RelatedPersonInput
  mother: PersonInput
  father: PersonInput
  spouse: PersonInput
  eventLocation: LocationInput
  mannerOfDeath: MannerOfDeath
  causeOfDeathMethod: CauseOfDeathMethodType
  causeOfDeath: String
  createdAt: Date
  updatedAt: Date
}

input UserInput {
  id: ID
  name: [HumanNameInput]
  identifier: [UserIdentifierInput]
  username: String
  mobile: String
  role: String
  type: String
  email: String
  primaryOffice: String
  catchmentArea: [String]
  device: String
  signature: SignatureInput
}

input SecurityQuestionAnswer {
  questionKey: String
  answer: String
}

scalar Map

type Registration {
  id: ID
  _fhirID: ID
  draftId: String
  trackingId: String
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  contact: RegistrationContactType
  contactRelationship: String
  contactPhoneNumber: String
  status: [RegWorkflow]
  type: RegistrationType
  inCompleteFields: String
  attachments: [Attachment]
  certificates: [Certificate]
  duplicates: [ID]
}

type RelatedPerson {
  id: ID
  _fhirID: ID
  relationship: RelationshipType
  otherRelationship: String
  affidavit: [Attachment]
  individual: Person
}

type Vaccination {
  _fhirID: ID
  manufacturer: [String]
  priorityGroup: [String]
  batchNumber: String
  notes: String
  doseGiven1: String
}

enum BirthType {
  SINGLE
  TWIN
  TRIPLET
  QUADRUPLET
  HIGHER_MULTIPLE_DELIVERY
}

enum AttendantType {
  PHYSICIAN
  NURSE
  NURSE_MIDWIFE
  MIDWIFE
  OTHER_PARAMEDICAL_PERSONNEL
  TRADITIONAL_BIRTH_ATTENDANT
  LAYPERSON
  NONE
  OTHER
}

enum BirthRegType {
  BOTH_PARENTS
  SELF
  INFORMANT_ONLY
  MOTHER_ONLY
  FATHER_ONLY
}

enum BirthRegPresence {
  BOTH_PARENTS
  INFORMANT
  MOTHER
  FATHER
  OTHER
  SELF
}

type PrimaryCaregiver {
  primaryCaregiver: Person
  reasonsNotApplying: [ReasonsNotApplying]
  parentDetailsType: ParentDetailsType
}

enum MannerOfDeath {
  NATURAL_CAUSES
  ACCIDENT
  SUICIDE
  HOMICIDE
  UNDETERMINED
}

enum CauseOfDeathMethodType {
  VERBAL_AUTOPSY
  MEDICALLY_CERTIFIED
}

type IdentityType {
  id: ID
  type: IdentityIDType
  otherType: String
}

type HumanName {
  use: String
  firstNames: String
  familyName: String
  baptismalName: String
}

type ContactPoint {
  system: String
  value: String
  use: String
}

enum MaritalStatusType {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
  NOT_STATED
  SEPARATED
}

type Address {
  use: String
  type: AddressType
  text: String
  line: [String]
  lineName: [String]
  city: String
  district: String
  districtName: String
  state: String
  stateName: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

type Attachment {
  id: ID!
  _fhirID: ID
  contentType: String
  data: String
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String
  subject: AttachmentSubject
  createdAt: Date
}

type Deceased {
  deceased: Boolean
  deathDate: String
}

enum EducationType {
  NO_SCHOOLING
  PRIMARY_ISCED_1
  LOWER_SECONDARY_ISCED_2
  UPPER_SECONDARY_ISCED_3
  POST_SECONDARY_ISCED_4
  FIRST_STAGE_TERTIARY_ISCED_5
  SECOND_STAGE_TERTIARY_ISCED_6
  NOT_STATED
}

type StatusWiseRegistrationCount {
  status: String!
  count: Int!
}

type Identifier {
  system: String
  value: String
}

enum LocationType {
  HEALTH_FACILITY
  HOSPITAL
  OTHER_HEALTH_INSTITUTION
  ADMIN_STRUCTURE
  CRVS_OFFICE
  PRIVATE_HOME
  CURRENT
  PERMANENT
  MILITARY_BASE_OR_CANTONMENT
  IDP_CAMP
  UNHCR_CAMP
  OTHER
}

type LocalRegistrar {
  name: [HumanName]!
  role: String!
  signature: Signature
}

type Signature {
  data: String
  type: String
}

type SearchFieldAgentResponse {
  practitionerId: String
  fullName: String
  type: String
  status: String
  primaryOfficeId: String
  creationDate: String
  totalNumberOfApplicationStarted: Int
  totalNumberOfInProgressAppStarted: Int
  totalNumberOfRejectedApplications: Int
  averageTimeForDeclaredApplications: Int
}

type RegistrationGenderBasisMetrics {
  details: [GenderBasisDetailsMetrics!]
  total: GenderBasisTotalCount
}

type RegistrationTimeFrameMetrics {
  details: [TimeFrameDetailMetrics!]
  total: TimeFrameTotalCount
}

type Registration45DayEstimatedMetrics {
  details: [Estimated45DayMetrics!]
  total: Estimate45DayTotalCount
}

type CertificationPaymentMetrics {
  details: [CertificationPaymentDetailsMetrics!]
  total: CertificationPaymentTotalCount
}

type EstimationMetrics {
  actualRegistration: Int!
  estimatedRegistration: Float!
  estimatedPercentage: Float!
  malePercentage: Float!
  femalePercentage: Float!
}

type MonthWise45DayEstimation {
  actualTotalRegistration: Int!
  actual45DayRegistration: Int!
  estimatedRegistration: Float!
  estimated45DayPercentage: Float!
  month: String!
  year: String!
  startOfMonth: String!
  endOfMonth: String!
}

type EventIn45DayEstimationCount {
  actualTotalRegistration: Int!
  actual45DayRegistration: Int!
  estimatedRegistration: Float!
  estimated45DayPercentage: Float!
}

type LocationWise45DayEstimation {
  actualTotalRegistration: Int!
  actual45DayRegistration: Int!
  estimatedRegistration: Float!
  estimated45DayPercentage: Float!
  locationId: String!
  locationName: String!
}

type TimeLoggedMetrics {
  status: String!
  trackingId: String
  eventType: String!
  time: String!
}

interface EventSearchSet {
  id: ID!
  type: String
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type EventProgressSet {
  id: ID!
  type: String
  name: [HumanName]
  dateOfEvent: Date
  registration: RegistrationSearchSet
  startedBy: User
  startedByFacility: String
  startedAt: Date
  progressReport: EventProgressData
}

input PersonInput {
  _fhirID: ID
  identifier: [IdentityInput]
  name: [HumanNameInput]
  telecom: [ContactPointInput]
  gender: String
  birthDate: String
  maritalStatus: MaritalStatusType
  occupation: String
  dateOfMarriage: Date
  multipleBirth: Int
  address: [AddressInput]
  photo: [AttachmentInput]
  deceased: DeceasedInput
  nationality: [String]
  educationalAttainment: EducationType
  individual: PersonInput
}

input LocationInput {
  _fhirID: ID
  identifier: [ID]
  status: String
  name: String
  alias: [String]
  description: String
  partOf: String
  type: LocationType
  telecom: [ContactPointInput]
  address: AddressInput
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
}

input RegistrationInput {
  _fhirID: ID
  draftId: String
  trackingId: String
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  contact: RegistrationContactType
  contactRelationship: String
  contactPhoneNumber: String
  status: [RegWorkflowInput]
  type: RegistrationType
  inCompleteFields: String
  attachments: [AttachmentInput]
  certificates: [CertificateInput]
  location: LocationInput
}

input RelatedPersonInput {
  id: ID
  _fhirID: ID
  relationship: RelationshipType
  otherRelationship: String
  affidavit: [AttachmentInput]
  individual: PersonInput
}

input VaccinationInput {
  _fhirID: ID
  manufacturer: [String]
  priorityGroup: [String]
  batchNumber: String
  notes: String
  doseGiven1: String
}

input PrimaryCaregiverInput {
  primaryCaregiver: PersonInput
  reasonsNotApplying: [ReasonsNotApplyingInput]
  parentDetailsType: ParentDetailsType
}

input HumanNameInput {
  use: String
  firstNames: String
  familyName: String
  baptismalName: String
}

input UserIdentifierInput {
  use: String
  system: String
  value: String
}

input SignatureInput {
  data: String
  type: String
}

enum RegistrationContactType {
  BOTH
  MOTHER
  FATHER
  OTHER
  APPLICANT
  SELF
}

type RegWorkflow {
  id: ID!
  type: RegStatus
  user: User
  timestamp: Date
  comments: [Comment]
  location: Location
  office: Location
  timeLogged: Int
}

enum RegistrationType {
  BIRTH
  DEATH
}

type Certificate {
  collector: RelatedPerson
  hasShowedVerifiedDocument: Boolean
  payments: [Payment]
  data: String
}

enum RelationshipType {
  FATHER
  MOTHER
  SPOUSE
  SON
  DAUGHTER
  SON_IN_LAW
  DAUGHTER_IN_LAW
  EXTENDED_FAMILY
  OTHER
  INFORMANT
  GRANDFATHER
  GRANDMOTHER
  GRANDSON
  GRANDDAUGHTER
  BROTHER
  SISTER
  OTHER_FAMILY_MEMBER
  INSTITUTION_HEAD_PLACE_OF_BIRTH
  HOUSE_OWNER
  OPERATOR
  OFFICE_IN_CHARGE
  LEGAL_GUARDIAN
  BOTH_PARENTS
  HEAD_OF_THE_INSTITUTE
  OWNER_OF_THE_HOUSE
  DRIVER_OF_THE_VEHICLE
  OFFICER_IN_CHARGE
}

type ReasonsNotApplying {
  primaryCaregiverType: PrimaryCaregiverType
  reasonNotApplying: String
  isDeceased: Boolean
}

enum ParentDetailsType {
  MOTHER_AND_FATHER
  MOTHER_ONLY
  FATHER_ONLY
  NONE
}

enum IdentityIDType {
  PASSPORT
  MY_CHILD_ID
  NATIONAL_ID
  DRIVING_LICENSE
  BIRTH_REGISTRATION_NUMBER
  DEATH_REGISTRATION_NUMBER
  REFUGEE_NUMBER
  ALIEN_NUMBER
  OTHER
  NO_ID
  SOCIAL_SECURITY_NO
}

enum AddressType {
  HEALTH_FACILITY
  ADMIN_STRUCTURE
  CRVS_OFFICE
  PRIVATE_HOME
  PLACE_OF_HERITAGE
  CURRENT
  PERMANENT
  MILITARY_BASE_OR_CANTONMENT
  IDP_CAMP
  UNHCR_CAMP
  OTHER
}

enum AttachmentType {
  PASSPORT
  NATIONAL_ID_FRONT
  NATIONAL_ID_BACK
  IMMUNISATION_CERTIFICATE
  PAPER_FORM
  PASSPORT_PHOTO
  BIRTH_REGISTRATION
  SCHOOL_CERTIFICATE
  PROOF_OF_DEATH
  OTHER
  POST_MORTEM_CERTIFICATE
  HOSPITAL_DISCHARGE_CERTIFICATE
  ATTESTED_DEATH_LETTER
  ATTESTED_DEATH_CERTIFICATE
  BURIAL_RECEIPT
  FUNERAL_RECEIPT
  DOCTOR_CERTIFICATE
  EPI_CARD
  EPI_STAFF_CERTIFICATE
  BIRTH_PLACE_DATE_PROOF
  DISCHARGE_CERTIFICATE
  MEDICAL_INSTITUTION
  BIRTH_ATTENDANT
  TAX_RECEIPT
  BROUGHT_IN_DEAD_CERTIFICATE
  CORONERS_REPORT
  SIGNED_AFFIDAVIT
  DECEASED_BIRTH_PROOF_PAPER
  ORIGINAL_BIRTH_RECORD
  UNDER_FIVE_CARD
  PROOF_OF_LEGAL_GUARDIANSHIP
  PROOF_OF_ASSIGNED_RESPONSIBILITY
  LETTER_FROM_COUNCILLOR
}

enum AttachmentSubject {
  MOTHER
  FATHER
  CHILD
  OTHER
  PARENT
  CHILD_AGE
  DECEASED_ID_PROOF
  DECEASED_PARMANENT_ADDRESS_PROOF
  DECEASED_DEATH_PROOF
  DECEASED_BIRTH_PROOF
  APPLICANT_ID_PROOF
  APPLICANT_ATHORITY_TO_APPLY_PROOF
  LEGAL_GUARDIAN_PROOF
  ASSIGNED_RESPONSIBILITY_PROOF
  WARD_COUNCILLOR_PROOF
}

type GenderBasisDetailsMetrics {
  location: ID!
  maleUnder18: Int!
  femaleUnder18: Int!
  maleOver18: Int!
  femaleOver18: Int!
  total: Int!
}

type GenderBasisTotalCount {
  maleUnder18: Int!
  femaleUnder18: Int!
  maleOver18: Int!
  femaleOver18: Int!
  total: Int!
}

type TimeFrameDetailMetrics {
  locationId: String!
  regWithin45d: Int!
  regWithin45dTo1yr: Int!
  regWithin1yrTo5yr: Int!
  regOver5yr: Int!
  total: Int!
}

type TimeFrameTotalCount {
  regWithin45d: Int!
  regWithin45dTo1yr: Int!
  regWithin1yrTo5yr: Int!
  regOver5yr: Int!
  total: Int!
}

type Estimated45DayMetrics {
  locationId: String!
  estimatedRegistration: Float!
  registrationIn45Day: Int!
  estimationYear: Int!
  estimationLocationLevel: String!
  estimationPercentage: Float!
}

type Estimate45DayTotalCount {
  estimatedRegistration: Float!
  registrationIn45Day: Int!
  estimationPercentage: Float!
}

type CertificationPaymentDetailsMetrics {
  total: Int!
  locationId: String!
}

type CertificationPaymentTotalCount {
  total: Int!
}

type RegistrationSearchSet {
  status: String
  contactNumber: String
  contactRelationship: String
  dateOfApplication: Date
  trackingId: String
  registrationNumber: String
  eventLocationId: String
  registeredLocationId: String
  reason: String
  comment: String
  duplicates: [ID]
  createdAt: String
  modifiedAt: String
}

type OperationHistorySearchSet {
  operationType: String
  operatedOn: Date
  operatorRole: String
  operatorName: [HumanName]
  operatorOfficeName: String
  operatorOfficeAlias: [String]
  notificationFacilityName: String
  notificationFacilityAlias: [String]
  rejectReason: String
  rejectComment: String
}

type BirthEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  childName: [HumanName]
  dateOfBirth: Date
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type DeathEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  deceasedName: [HumanName]
  dateOfDeath: Date
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type EventProgressData {
  timeInProgress: Int
  timeInReadyForReview: Int
  timeInRequiresUpdates: Int
  timeInWaitingForApproval: Int
  timeInWaitingForBRIS: Int
  timeInReadyToPrint: Int
}

input IdentityInput {
  id: ID
  type: IdentityIDType
  otherType: String
}

input ContactPointInput {
  system: String
  value: String
  use: String
}

input AddressInput {
  use: String
  type: AddressType
  text: String
  line: [String]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

input AttachmentInput {
  _fhirID: ID
  contentType: String
  data: String
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String
  subject: AttachmentSubject
  createdAt: Date
}

input DeceasedInput {
  deceased: Boolean
  deathDate: String
}

input RegWorkflowInput {
  type: RegStatus
  user: UserInput
  timestamp: Date
  comments: [CommentInput]
  location: LocationInput
  timeLoggedMS: Int
}

input CertificateInput {
  collector: RelatedPersonInput
  hasShowedVerifiedDocument: Boolean
  payments: [PaymentInput]
  data: String
}

input ReasonsNotApplyingInput {
  primaryCaregiverType: PrimaryCaregiverType
  reasonNotApplying: String
  isDeceased: Boolean
}

enum RegStatus {
  IN_PROGRESS
  DECLARED
  WAITING_VALIDATION
  VALIDATED
  REGISTERED
  CERTIFIED
  REJECTED
}

type Comment {
  id: ID!
  user: User
  comment: String
  createdAt: Date
}

type Payment {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
}

enum PrimaryCaregiverType {
  MOTHER_AND_FATHER
  MOTHER
  FATHER
  INFORMANT
  LEGAL_GUARDIAN
  OTHER
}

input CommentInput {
  user: UserInput
  comment: String
  createdAt: Date
}

input PaymentInput {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
}

enum PaymentType {
  MANUAL
}

enum PaymentOutcomeType {
  COMPLETED
  ERROR
  PARTIAL
}

